"use strict";const L=require("postprocessing"),a=require("three"),f=require("@takram/three-geospatial"),k=require("@takram/three-geospatial/shaders"),_=require("./shared2.cjs"),je="6ad51c78a0d059c05da26c5b5addd73ad48ba618",pt=`https://media.githubusercontent.com/media/takram-design-engineering/three-geospatial/${je}/packages/atmosphere/assets`,Tt=`https://media.githubusercontent.com/media/takram-design-engineering/three-geospatial/${je}/packages/atmosphere/assets/stars.bin`,Q=64,e0=16,M0=32,w0=128,y0=32,C0=8,$=C0*y0,q=w0,Z=M0,t0=256,n0=64,A0=1/1e3,St=100,Et=new a.Matrix3(3.2406255,-1.537208,-.4986286,-.9689307,1.8757561,.0415175,.0557101,-.2040211,1.0569959),vt=new a.Vector3(.2126,.7152,.0722),_t=["solarIrradiance","sunAngularRadius","bottomRadius","topRadius","rayleighDensity","rayleighScattering","mieDensity","mieScattering","mieExtinction","miePhaseFunctionG","absorptionDensity","absorptionExtinction","groundAlbedo","muSMin","skyRadianceToLuminance","sunRadianceToLuminance"];function Rt(n,e){if(e!=null)for(const t of _t){const r=e[t];r!=null&&(n[t]instanceof a.Vector3?n[t].copy(r):n[t]=r)}}class i0{constructor(e,t,r,i,s){this.width=e,this.expTerm=t,this.expScale=r,this.linearTerm=i,this.constantTerm=s}toUniform(){return new a.Uniform({width:this.width,exp_term:this.expTerm,exp_scale:this.expScale,linear_term:this.linearTerm,constant_term:this.constantTerm})}}const Z0=class Z0{constructor(e){this.solarIrradiance=new a.Vector3(1.474,1.8504,1.91198),this.sunAngularRadius=.004675,this.bottomRadius=636e4,this.topRadius=642e4,this.rayleighDensity=[new i0(0,0,0,0,0),new i0(0,1,-.125,0,0)],this.rayleighScattering=new a.Vector3(.005802,.013558,.0331),this.mieDensity=[new i0(0,0,0,0,0),new i0(0,1,-.833333,0,0)],this.mieScattering=new a.Vector3(.003996,.003996,.003996),this.mieExtinction=new a.Vector3(.00444,.00444,.00444),this.miePhaseFunctionG=.8,this.absorptionDensity=[new i0(25,0,0,1/15,-2/3),new i0(0,0,0,-1/15,8/3)],this.absorptionExtinction=new a.Vector3(65e-5,.001881,85e-6),this.groundAlbedo=new a.Color().setScalar(.1),this.muSMin=Math.cos(f.radians(120)),this.sunRadianceToLuminance=new a.Vector3(98242.786222,69954.398112,66475.012354),this.skyRadianceToLuminance=new a.Vector3(114974.916437,71305.954816,65310.548555),this.sunRadianceToRelativeLuminance=new a.Vector3,this.skyRadianceToRelativeLuminance=new a.Vector3,Rt(this,e);const t=vt.dot(this.sunRadianceToLuminance);this.sunRadianceToRelativeLuminance.copy(this.sunRadianceToLuminance).divideScalar(t),this.skyRadianceToRelativeLuminance.copy(this.skyRadianceToLuminance).divideScalar(t)}toUniform(){return new a.Uniform({solar_irradiance:this.solarIrradiance,sun_angular_radius:this.sunAngularRadius,bottom_radius:this.bottomRadius*A0,top_radius:this.topRadius*A0,rayleigh_density:{layers:this.rayleighDensity.map(e=>e.toUniform().value)},rayleigh_scattering:this.rayleighScattering,mie_density:{layers:this.mieDensity.map(e=>e.toUniform().value)},mie_scattering:this.mieScattering,mie_extinction:this.mieExtinction,mie_phase_function_g:this.miePhaseFunctionG,absorption_density:{layers:this.absorptionDensity.map(e=>e.toUniform().value)},absorption_extinction:this.absorptionExtinction,ground_albedo:this.groundAlbedo,mu_s_min:this.muSMin})}};Z0.DEFAULT=new Z0;let X=Z0;const xt=new a.Vector3;function J0(n,e,t,r){const i=t.projectOnSurface(n,xt);return i!=null?t.getOsculatingSphereCenter(i,e,r).negate():r.setScalar(0)}const At=`precision highp sampler2DArray;

#include "core/depth"
#include "core/math"
#include "core/packing"
#include "core/transform"
#ifdef HAS_SHADOW
#include "core/raySphereIntersection"
#include "core/cascadedShadowMaps"
#include "core/interleavedGradientNoise"
#include "core/vogelDisk"
#endif // HAS_SHADOW

#include "bruneton/definitions"

uniform AtmosphereParameters ATMOSPHERE;
uniform vec3 SUN_SPECTRAL_RADIANCE_TO_LUMINANCE;
uniform vec3 SKY_SPECTRAL_RADIANCE_TO_LUMINANCE;

uniform sampler2D transmittance_texture;
uniform sampler3D scattering_texture;
uniform sampler2D irradiance_texture;
uniform sampler3D single_mie_scattering_texture;
uniform sampler3D higher_order_scattering_texture;

#include "bruneton/common"
#include "bruneton/runtime"

#include "sky"

uniform sampler2D normalBuffer;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 inverseProjectionMatrix;
uniform mat4 inverseViewMatrix;
uniform float bottomRadius;
uniform mat4 worldToECEFMatrix;
uniform float geometricErrorCorrectionAmount;
uniform vec3 sunDirection;
uniform vec3 moonDirection;
uniform float moonAngularRadius;
uniform float lunarRadianceScale;
uniform float albedoScale;

#ifdef HAS_LIGHTING_MASK
uniform sampler2D lightingMaskBuffer;
#endif // HAS_LIGHTING_MASK

// prettier-ignore
#define LIGHTING_MASK_CHANNEL_ LIGHTING_MASK_CHANNEL

#ifdef HAS_OVERLAY
uniform sampler2D overlayBuffer;
#endif // HAS_OVERLAY

#ifdef HAS_SHADOW
uniform sampler2DArray shadowBuffer;
uniform vec2 shadowIntervals[SHADOW_CASCADE_COUNT];
uniform mat4 shadowMatrices[SHADOW_CASCADE_COUNT];
uniform mat4 inverseShadowMatrices[SHADOW_CASCADE_COUNT];
uniform float shadowFar;
uniform float shadowTopHeight;
uniform float shadowRadius;
uniform sampler3D stbnTexture;
uniform int frame;
#endif // HAS_SHADOW

#ifdef HAS_SHADOW_LENGTH
uniform sampler2D shadowLengthBuffer;
#endif // HAS_SHADOW_LENGTH

varying vec3 vCameraPosition;
varying vec3 vRayDirection;
varying vec3 vGeometryAltitudeCorrection;
varying vec3 vEllipsoidRadiiSquared;

vec3 readNormal(const vec2 uv) {
  #ifdef OCT_ENCODED_NORMAL
  return unpackVec2ToNormal(texture(normalBuffer, uv).xy);
  #else // OCT_ENCODED_NORMAL
  return 2.0 * texture(normalBuffer, uv).xyz - 1.0;
  #endif // OCT_ENCODED_NORMAL
}

void correctGeometricError(inout vec3 positionECEF, inout vec3 normalECEF) {
  // TODO: The error is pronounced at the edge of the ellipsoid due to the
  // large difference between the sphere position and the unprojected position
  // at the current fragment. Calculating the sphere position from the fragment
  // UV may resolve this.

  // Correct way is slerp, but this will be small-angle interpolation anyways.
  vec3 sphereNormal = normalize(positionECEF / vEllipsoidRadiiSquared);
  vec3 spherePosition = ATMOSPHERE.bottom_radius * sphereNormal;
  normalECEF = mix(normalECEF, sphereNormal, geometricErrorCorrectionAmount);
  positionECEF = mix(positionECEF, spherePosition, geometricErrorCorrectionAmount);
}

#if defined(SUN_LIGHT) || defined(SKY_LIGHT)

vec3 getSunSkyIrradiance(
  const vec3 positionECEF,
  const vec3 normal,
  const vec3 inputColor,
  const float sunTransmittance
) {
  // Assume lambertian BRDF. If both SUN_LIGHT and SKY_LIGHT are not defined,
  // regard the inputColor as radiance at the texel.
  vec3 diffuse = inputColor * albedoScale * RECIPROCAL_PI;
  vec3 skyIrradiance;
  vec3 sunIrradiance = GetSunAndSkyIrradiance(positionECEF, normal, sunDirection, skyIrradiance);

  #ifdef HAS_SHADOW
  sunIrradiance *= sunTransmittance;
  #endif // HAS_SHADOW

  #if defined(SUN_LIGHT) && defined(SKY_LIGHT)
  return diffuse * (sunIrradiance + skyIrradiance);
  #elif defined(SUN_LIGHT)
  return diffuse * sunIrradiance;
  #elif defined(SKY_LIGHT)
  return diffuse * skyIrradiance;
  #endif // defined(SUN_LIGHT) && defined(SKY_LIGHT)
}

#endif // defined(SUN_LIGHT) || defined(SKY_LIGHT)

#if defined(TRANSMITTANCE) || defined(INSCATTER)

void applyTransmittanceInscatter(const vec3 positionECEF, float shadowLength, inout vec3 radiance) {
  vec3 transmittance;
  vec3 inscatter = GetSkyRadianceToPoint(
    vCameraPosition,
    positionECEF,
    shadowLength,
    sunDirection,
    transmittance
  );
  #ifdef TRANSMITTANCE
  radiance = radiance * transmittance;
  #endif // TRANSMITTANCE
  #ifdef INSCATTER
  radiance = radiance + inscatter;
  #endif // INSCATTER
}

#endif // defined(TRANSMITTANCE) || defined(INSCATTER)

#ifdef HAS_SHADOW

float getSTBN() {
  ivec3 size = textureSize(stbnTexture, 0);
  vec3 scale = 1.0 / vec3(size);
  return texture(stbnTexture, vec3(gl_FragCoord.xy, float(frame % size.z)) * scale).r;
}

vec2 getShadowUv(const vec3 worldPosition, const int cascadeIndex) {
  vec4 clip = shadowMatrices[cascadeIndex] * vec4(worldPosition, 1.0);
  clip /= clip.w;
  return clip.xy * 0.5 + 0.5;
}

float getDistanceToShadowTop(const vec3 positionECEF) {
  // Distance to the top of the shadows along the sun direction, which matches
  // the ray origin of BSM.
  return raySphereSecondIntersection(
    positionECEF / METER_TO_LENGTH_UNIT, // TODO: Make units consistent
    sunDirection,
    vec3(0.0),
    bottomRadius + shadowTopHeight
  );
}

float readShadowOpticalDepth(const vec2 uv, const float distanceToTop, const int cascadeIndex) {
  // r: frontDepth, g: meanExtinction, b: maxOpticalDepth, a: maxOpticalDepthTail
  vec4 shadow = texture(shadowBuffer, vec3(uv, float(cascadeIndex)));
  // Omit adding maxOpticalDepthTail to avoid pronounced aliasing. Ground
  // shadow will be attenuated by inscatter anyways.
  return min(shadow.b, shadow.g * max(0.0, distanceToTop - shadow.r));
}

float sampleShadowOpticalDepthPCF(
  const vec3 worldPosition,
  const float distanceToTop,
  const float radius,
  const int cascadeIndex
) {
  vec2 uv = getShadowUv(worldPosition, cascadeIndex);
  if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {
    return 0.0;
  }

  vec2 texelSize = vec2(1.0) / vec2(textureSize(shadowBuffer, 0).xy);
  float sum = 0.0;
  vec2 offset;
  #pragma unroll_loop_start
  for (int i = 0; i < 16; ++i) {
    #if UNROLLED_LOOP_INDEX < SHADOW_SAMPLE_COUNT
    offset = vogelDisk(
      UNROLLED_LOOP_INDEX,
      SHADOW_SAMPLE_COUNT,
      interleavedGradientNoise(gl_FragCoord.xy) * PI2
    );
    sum += readShadowOpticalDepth(uv + offset * radius * texelSize, distanceToTop, cascadeIndex);
    #endif // UNROLLED_LOOP_INDEX < SHADOW_SAMPLE_COUNT
  }
  #pragma unroll_loop_end
  return sum / float(SHADOW_SAMPLE_COUNT);
}

float sampleShadowOpticalDepth(
  const vec3 worldPosition,
  const vec3 positionECEF,
  const float radius,
  const float jitter
) {
  float distanceToTop = getDistanceToShadowTop(positionECEF);
  if (distanceToTop <= 0.0) {
    return 0.0;
  }
  int cascadeIndex = getFadedCascadeIndex(
    viewMatrix,
    worldPosition,
    shadowIntervals,
    cameraNear,
    shadowFar,
    jitter
  );
  return cascadeIndex >= 0
    ? sampleShadowOpticalDepthPCF(worldPosition, distanceToTop, radius, cascadeIndex)
    : 0.0;
}

float getShadowRadius(const vec3 worldPosition) {
  vec4 clip = shadowMatrices[0] * vec4(worldPosition, 1.0);
  clip /= clip.w;

  // Offset by 1px in each direction in shadow's clip coordinates.
  vec2 shadowSize = vec2(textureSize(shadowBuffer, 0));
  vec3 offset = vec3(2.0 / shadowSize, 0.0);
  vec4 clipX = clip + offset.xzzz;
  vec4 clipY = clip + offset.zyzz;

  // Convert back to world space.
  vec4 worldX = inverseShadowMatrices[0] * clipX;
  vec4 worldY = inverseShadowMatrices[0] * clipY;

  // Project into the main camera's clip space.
  mat4 viewProjectionMatrix = projectionMatrix * viewMatrix;
  vec4 projected = viewProjectionMatrix * vec4(worldPosition, 1.0);
  vec4 projectedX = viewProjectionMatrix * worldX;
  vec4 projectedY = viewProjectionMatrix * worldY;
  projected /= projected.w;
  projectedX /= projectedX.w;
  projectedY /= projectedY.w;

  // Take the mean of pixel sizes.
  vec2 center = (projected.xy * 0.5 + 0.5) * resolution;
  vec2 offsetX = (projectedX.xy * 0.5 + 0.5) * resolution;
  vec2 offsetY = (projectedY.xy * 0.5 + 0.5) * resolution;
  float size = max(length(offsetX - center), length(offsetY - center));

  return remapClamped(size, 10.0, 50.0, 0.0, shadowRadius);
}

#endif // HAS_SHADOW

void mainImage(const vec4 inputColor, const vec2 uv, out vec4 outputColor) {
  #if defined(HAS_LIGHTING_MASK) && defined(DEBUG_SHOW_LIGHTING_MASK)
  outputColor.rgb = vec3(texture(lightingMaskBuffer, uv).LIGHTING_MASK_CHANNEL_);
  outputColor.a = 1.0;
  return;
  #endif // defined(HAS_LIGHTING_MASK) && defined(DEBUG_SHOW_LIGHTING_MASK)

  float shadowLength = 0.0;
  #ifdef HAS_SHADOW_LENGTH
  shadowLength = texture(shadowLengthBuffer, uv).r;
  #endif // HAS_SHADOW_LENGTH

  #ifdef HAS_OVERLAY
  vec4 overlay = texture(overlayBuffer, uv);
  if (overlay.a == 1.0) {
    outputColor = overlay;
    return;
  }
  #endif // HAS_OVERLAY

  float depth = readDepth(uv);
  if (depth >= 1.0 - 1e-8) {
    #ifdef SKY
    vec3 rayDirection = normalize(vRayDirection);
    outputColor.rgb = getSkyRadiance(
      vCameraPosition,
      rayDirection,
      shadowLength,
      sunDirection,
      moonDirection,
      moonAngularRadius,
      lunarRadianceScale
    );
    outputColor.a = 1.0;
    #else // SKY
    outputColor = inputColor;
    #endif // SKY

    #ifdef HAS_OVERLAY
    outputColor.rgb = outputColor.rgb * (1.0 - overlay.a) + overlay.rgb;
    #endif // HAS_OVERLAY
    return;
  }
  depth = reverseLogDepth(depth, cameraNear, cameraFar);

  // Reconstruct position and normal in world space.
  vec3 viewPosition = screenToView(
    uv,
    depth,
    getViewZ(depth),
    projectionMatrix,
    inverseProjectionMatrix
  );
  vec3 viewNormal;
  #ifdef RECONSTRUCT_NORMAL
  vec3 dx = dFdx(viewPosition);
  vec3 dy = dFdy(viewPosition);
  viewNormal = normalize(cross(dx, dy));
  #else // RECONSTRUCT_NORMAL
  viewNormal = readNormal(uv);
  #endif // RECONSTRUCT_NORMAL

  vec3 worldPosition = (inverseViewMatrix * vec4(viewPosition, 1.0)).xyz;
  vec3 worldNormal = (inverseViewMatrix * vec4(viewNormal, 0.0)).xyz;
  vec3 positionECEF = (worldToECEFMatrix * vec4(worldPosition, 1.0)).xyz;
  positionECEF = positionECEF * METER_TO_LENGTH_UNIT + vGeometryAltitudeCorrection;
  vec3 normalECEF = (worldToECEFMatrix * vec4(worldNormal, 0.0)).xyz;

  #ifdef CORRECT_GEOMETRIC_ERROR
  correctGeometricError(positionECEF, normalECEF);
  #endif // CORRECT_GEOMETRIC_ERROR

  #ifdef HAS_SHADOW
  float stbn = getSTBN();
  float radius = getShadowRadius(worldPosition);
  float opticalDepth = sampleShadowOpticalDepth(worldPosition, positionECEF, radius, stbn);
  float sunTransmittance = exp(-opticalDepth);
  #else // HAS_SHADOW
  float sunTransmittance = 1.0;
  #endif // HAS_SHADOW

  vec3 radiance;
  #if defined(SUN_LIGHT) || defined(SKY_LIGHT)
  radiance = getSunSkyIrradiance(positionECEF, normalECEF, inputColor.rgb, sunTransmittance);
  #ifdef HAS_LIGHTING_MASK
  float lightingMask = texture(lightingMaskBuffer, uv).LIGHTING_MASK_CHANNEL_;
  radiance = mix(inputColor.rgb, radiance, lightingMask);
  #endif // HAS_LIGHTING_MASK
  #else // defined(SUN_LIGHT) || defined(SKY_LIGHT)
  radiance = inputColor.rgb;
  #endif // defined(SUN_LIGHT) || defined(SKY_LIGHT)

  #if defined(TRANSMITTANCE) || defined(INSCATTER)
  applyTransmittanceInscatter(positionECEF, shadowLength, radiance);
  #endif // defined(TRANSMITTANCE) || defined(INSCATTER)

  outputColor = vec4(radiance, inputColor.a);

  #ifdef HAS_OVERLAY
  outputColor.rgb = outputColor.rgb * (1.0 - overlay.a) + overlay.rgb;
  #endif // HAS_OVERLAY
}
`,Mt=`uniform mat4 inverseViewMatrix;
uniform mat4 inverseProjectionMatrix;
uniform vec3 cameraPosition;
uniform mat4 worldToECEFMatrix;
uniform vec3 altitudeCorrection;
uniform float geometricErrorCorrectionAmount;
uniform vec3 ellipsoidRadii;

varying vec3 vCameraPosition;
varying vec3 vRayDirection;
varying vec3 vGeometryAltitudeCorrection;
varying vec3 vEllipsoidRadiiSquared;

void getCameraRay(out vec3 origin, out vec3 direction) {
  bool isPerspective = inverseProjectionMatrix[2][3] != 0.0; // 4th entry in the 3rd column

  if (isPerspective) {
    // Calculate the camera ray for a perspective camera.
    vec4 viewPosition = inverseProjectionMatrix * vec4(position, 1.0);
    vec4 worldDirection = inverseViewMatrix * vec4(viewPosition.xyz, 0.0);
    origin = cameraPosition;
    direction = worldDirection.xyz;
  } else {
    // Unprojected points to calculate direction.
    vec4 nearPoint = inverseProjectionMatrix * vec4(position.xy, -1.0, 1.0);
    vec4 farPoint = inverseProjectionMatrix * vec4(position.xy, -0.9, 1.0);
    nearPoint /= nearPoint.w;
    farPoint /= farPoint.w;

    // Calculate world values.
    vec4 worldDirection = inverseViewMatrix * vec4(farPoint.xyz - nearPoint.xyz, 0.0);
    vec4 worldOrigin = inverseViewMatrix * nearPoint;

    // Outputs
    direction = worldDirection.xyz;
    origin = worldOrigin.xyz;
  }
}

void mainSupport() {
  vec3 direction, origin;
  getCameraRay(origin, direction);

  vec3 cameraPositionECEF = (worldToECEFMatrix * vec4(origin, 1.0)).xyz;
  vCameraPosition = (cameraPositionECEF + altitudeCorrection) * METER_TO_LENGTH_UNIT;
  vRayDirection = (worldToECEFMatrix * vec4(direction, 0.0)).xyz;

  vGeometryAltitudeCorrection = altitudeCorrection * METER_TO_LENGTH_UNIT;
  // Gradually turn off the altitude correction on geometries as the geometric
  // error correction takes effect, because that on the ideal sphere will be
  // over corrected.
  // See: https://github.com/takram-design-engineering/three-geospatial/pull/23#issuecomment-2542914656
  #ifdef CORRECT_GEOMETRIC_ERROR
  vGeometryAltitudeCorrection *= 1.0 - geometricErrorCorrectionAmount;
  #endif // CORRECT_GEOMETRIC_ERROR

  vec3 radii = ellipsoidRadii * METER_TO_LENGTH_UNIT;
  vEllipsoidRadiiSquared = radii * radii;
}
`,Ye=`vec3 getLunarRadiance(const float moonAngularRadius) {
  // Not a physical number but the order of 10^-6 relative to the sun may fit.
  vec3 radiance =
    ATMOSPHERE.solar_irradiance *
    0.000002 /
    (PI * moonAngularRadius * moonAngularRadius) *
    SUN_SPECTRAL_RADIANCE_TO_LUMINANCE;
  return radiance;
}

float intersectSphere(const vec3 ray, const vec3 point, const float radius) {
  vec3 P = -point;
  float PoR = dot(P, ray);
  float D = dot(P, P) - radius * radius;
  return -PoR - sqrt(PoR * PoR - D);
}

float orenNayarDiffuse(const vec3 L, const vec3 V, const vec3 N) {
  float NoL = dot(N, L);
  float NoV = dot(N, V);
  float s = dot(L, V) - NoL * NoV;
  float t = mix(1.0, max(NoL, NoV), step(0.0, s));
  return max(0.0, NoL) * (0.62406015 + 0.41284404 * s / t);
}

vec3 getSkyRadiance(
  const vec3 cameraPosition,
  const vec3 rayDirection,
  const float shadowLength,
  const vec3 sunDirection,
  const vec3 moonDirection,
  const float moonAngularRadius,
  const float lunarRadianceScale
) {
  vec3 transmittance;
  vec3 radiance = GetSkyRadiance(
    cameraPosition,
    rayDirection,
    shadowLength,
    sunDirection,
    transmittance
  );

  // Rendering celestial objects without perspective doesn't make sense.
  #ifdef PERSPECTIVE_CAMERA

  #if defined(SUN) || defined(MOON)
  vec3 ddx = dFdx(rayDirection);
  vec3 ddy = dFdy(rayDirection);
  float fragmentAngle = length(ddx + ddy) / length(rayDirection);
  #endif // defined(SUN) || defined(MOON)

  #ifdef SUN
  float viewDotSun = dot(rayDirection, sunDirection);
  if (viewDotSun > cos(ATMOSPHERE.sun_angular_radius)) {
    float angle = acos(clamp(viewDotSun, -1.0, 1.0));
    float antialias = smoothstep(
      ATMOSPHERE.sun_angular_radius,
      ATMOSPHERE.sun_angular_radius - fragmentAngle,
      angle
    );
    radiance += transmittance * GetSolarRadiance() * antialias;
  }
  #endif // SUN

  #ifdef MOON
  float intersection = intersectSphere(rayDirection, moonDirection, moonAngularRadius);
  if (intersection > 0.0) {
    vec3 normal = normalize(moonDirection - rayDirection * intersection);
    float diffuse = orenNayarDiffuse(-sunDirection, rayDirection, normal);
    float viewDotMoon = dot(rayDirection, moonDirection);
    float angle = acos(clamp(viewDotMoon, -1.0, 1.0));
    float antialias = smoothstep(moonAngularRadius, moonAngularRadius - fragmentAngle, angle);
    radiance +=
      transmittance *
      getLunarRadiance(moonAngularRadius) *
      lunarRadianceScale *
      diffuse *
      antialias;
  }
  #endif // MOON

  #endif // PERSPECTIVE_CAMERA

  return radiance;
}
`;var wt=Object.defineProperty,U=(n,e,t,r)=>{for(var i=void 0,s=n.length-1,o;s>=0;s--)(o=n[s])&&(i=o(e,t,i)||i);return i&&wt(e,t,i),i};const yt=new a.Vector3,Ct=new a.Vector3,Dt=new f.Geodetic,Ke={blendFunction:L.BlendFunction.NORMAL,octEncodedNormal:!1,reconstructNormal:!1,ellipsoid:f.Ellipsoid.WGS84,correctAltitude:!0,correctGeometricError:!0,sunLight:!1,skyLight:!1,transmittance:!0,inscatter:!0,albedoScale:1,sky:!1,sun:!0,moon:!0,moonAngularRadius:.0045,lunarRadianceScale:1,ground:!0};class I extends L.Effect{constructor(e=new a.Camera,t,r=X.DEFAULT){const{blendFunction:i,normalBuffer:s=null,octEncodedNormal:o,reconstructNormal:u,irradianceTexture:c=null,scatteringTexture:d=null,transmittanceTexture:h=null,singleMieScatteringTexture:m=null,higherOrderScatteringTexture:g=null,ellipsoid:T,correctAltitude:p,correctGeometricError:v,sunDirection:x,sunIrradiance:C,sunLight:P,skyIrradiance:N,skyLight:O,transmittance:G,inscatter:V,irradianceScale:b,albedoScale:P0,sky:v0,sun:N0,moon:U0,moonDirection:r0,moonAngularRadius:O0,lunarRadianceScale:L0,ground:u0}={...Ke,...t};super("AerialPerspectiveEffect",f.unrollLoops(f.resolveIncludes(At,{core:{depth:k.depth,packing:k.packing,math:k.math,transform:k.transform,raySphereIntersection:k.raySphereIntersection,cascadedShadowMaps:k.cascadedShadowMaps,interleavedGradientNoise:k.interleavedGradientNoise,vogelDisk:k.vogelDisk},bruneton:{common:_._common,definitions:_._definitions,runtime:_._runtime},sky:Ye})),{blendFunction:i,vertexShader:Mt,attributes:L.EffectAttribute.DEPTH,uniforms:new Map(Object.entries({normalBuffer:new a.Uniform(s),projectionMatrix:new a.Uniform(new a.Matrix4),viewMatrix:new a.Uniform(new a.Matrix4),inverseProjectionMatrix:new a.Uniform(new a.Matrix4),inverseViewMatrix:new a.Uniform(new a.Matrix4),cameraPosition:new a.Uniform(new a.Vector3),bottomRadius:new a.Uniform(r.bottomRadius),ellipsoidRadii:new a.Uniform(new a.Vector3),worldToECEFMatrix:new a.Uniform(new a.Matrix4),altitudeCorrection:new a.Uniform(new a.Vector3),geometricErrorCorrectionAmount:new a.Uniform(0),sunDirection:new a.Uniform((x==null?void 0:x.clone())??new a.Vector3),albedoScale:new a.Uniform(b??P0),moonDirection:new a.Uniform((r0==null?void 0:r0.clone())??new a.Vector3),moonAngularRadius:new a.Uniform(O0),lunarRadianceScale:new a.Uniform(L0),overlayBuffer:new a.Uniform(null),shadowBuffer:new a.Uniform(null),shadowMapSize:new a.Uniform(new a.Vector2),shadowIntervals:new a.Uniform([]),shadowMatrices:new a.Uniform([]),inverseShadowMatrices:new a.Uniform([]),shadowFar:new a.Uniform(0),shadowTopHeight:new a.Uniform(0),shadowRadius:new a.Uniform(3),stbnTexture:new a.Uniform(null),frame:new a.Uniform(0),shadowLengthBuffer:new a.Uniform(null),lightingMaskBuffer:new a.Uniform(null),ATMOSPHERE:r.toUniform(),SUN_SPECTRAL_RADIANCE_TO_LUMINANCE:new a.Uniform(r.sunRadianceToRelativeLuminance),SKY_SPECTRAL_RADIANCE_TO_LUMINANCE:new a.Uniform(r.skyRadianceToRelativeLuminance),irradiance_texture:new a.Uniform(c),scattering_texture:new a.Uniform(d),transmittance_texture:new a.Uniform(h),single_mie_scattering_texture:new a.Uniform(null),higher_order_scattering_texture:new a.Uniform(null)})),defines:new Map([["TRANSMITTANCE_TEXTURE_WIDTH",t0.toFixed(0)],["TRANSMITTANCE_TEXTURE_HEIGHT",n0.toFixed(0)],["SCATTERING_TEXTURE_R_SIZE",M0.toFixed(0)],["SCATTERING_TEXTURE_MU_SIZE",w0.toFixed(0)],["SCATTERING_TEXTURE_MU_S_SIZE",y0.toFixed(0)],["SCATTERING_TEXTURE_NU_SIZE",C0.toFixed(0)],["IRRADIANCE_TEXTURE_WIDTH",Q.toFixed(0)],["IRRADIANCE_TEXTURE_HEIGHT",e0.toFixed(0)],["METER_TO_LENGTH_UNIT",A0.toFixed(7)]])}),this.camera=e,this.atmosphere=r,this.overlay=null,this.shadow=null,this.shadowLength=null,this.lightingMask=null,this.combinedScatteringTextures=!1,this.hasHigherOrderScatteringTexture=!1,this.shadowSampleCount=8,this.octEncodedNormal=o,this.reconstructNormal=u,this.singleMieScatteringTexture=m,this.higherOrderScatteringTexture=g,this.ellipsoid=T,this.correctAltitude=p,this.correctGeometricError=v,this.sunLight=C??P,this.skyLight=N??O,this.transmittance=G,this.inscatter=V,this.sky=v0,this.sun=N0,this.moon=U0,this.ground=u0}get mainCamera(){return this.camera}set mainCamera(e){this.camera=e}copyCameraSettings(e){const{projectionMatrix:t,matrixWorldInverse:r,projectionMatrixInverse:i,matrixWorld:s}=e,o=this.uniforms;o.get("projectionMatrix").value.copy(t),o.get("viewMatrix").value.copy(r),o.get("inverseProjectionMatrix").value.copy(i),o.get("inverseViewMatrix").value.copy(s);const u=e.getWorldPosition(o.get("cameraPosition").value),c=o.get("worldToECEFMatrix").value,d=yt.copy(u).applyMatrix4(c);try{const m=Dt.setFromECEF(d).height,g=Ct.set(0,this.ellipsoid.maximumRadius,-Math.max(0,m)).applyMatrix4(t);o.get("geometricErrorCorrectionAmount").value=f.saturate(f.remap(g.y,41.5,13.8,0,1))}catch{return}const h=o.get("altitudeCorrection");this.correctAltitude?J0(d,this.atmosphere.bottomRadius,this.ellipsoid,h.value):h.value.setScalar(0)}updateOverlay(){let e=!1;const{uniforms:t,defines:r,overlay:i}=this,s=r.has("HAS_OVERLAY"),o=i!=null;return o!==s&&(o?r.set("HAS_OVERLAY","1"):(r.delete("HAS_OVERLAY"),t.get("overlayBuffer").value=null),e=!0),o&&(t.get("overlayBuffer").value=i.map),e}updateShadow(){let e=!1;const{uniforms:t,defines:r,shadow:i}=this,s=r.has("HAS_SHADOW"),o=i!=null;if(o!==s&&(o?r.set("HAS_SHADOW","1"):(r.delete("HAS_SHADOW"),t.get("shadowBuffer").value=null),e=!0),o){const u=r.get("SHADOW_CASCADE_COUNT"),c=`${i.cascadeCount}`;u!==c&&(r.set("SHADOW_CASCADE_COUNT",i.cascadeCount.toFixed(0)),e=!0),t.get("shadowBuffer").value=i.map,t.get("shadowMapSize").value=i.mapSize,t.get("shadowIntervals").value=i.intervals,t.get("shadowMatrices").value=i.matrices,t.get("inverseShadowMatrices").value=i.inverseMatrices,t.get("shadowFar").value=i.far,t.get("shadowTopHeight").value=i.topHeight}return e}updateShadowLength(){let e=!1;const{uniforms:t,defines:r,shadowLength:i}=this,s=r.has("HAS_SHADOW_LENGTH"),o=i!=null;return o!==s&&(o?r.set("HAS_SHADOW_LENGTH","1"):(r.delete("HAS_SHADOW_LENGTH"),t.get("shadowLengthBuffer").value=null),e=!0),o&&(t.get("shadowLengthBuffer").value=i.map),e}updateLightingMask(){let e=!1;const{uniforms:t,defines:r,lightingMask:i}=this,s=r.has("HAS_LIGHTING_MASK"),o=i!=null;if(o!==s&&(o?r.set("HAS_LIGHTING_MASK","1"):(r.delete("HAS_LIGHTING_MASK"),t.get("lightingMaskBuffer").value=null),e=!0),o){t.get("lightingMaskBuffer").value=i.map;const u=r.get("LIGHTING_MASK_CHANNEL"),c=i.channel;c!==u&&(/^[rgba]$/.test(c)?(r.set("LIGHTING_MASK_CHANNEL",c),e=!0):console.error(`Expression validation failed: ${c}`))}return e}update(e,t,r){this.copyCameraSettings(this.camera);let i=!1;i||(i=this.updateOverlay()),i||(i=this.updateShadow()),i||(i=this.updateShadowLength()),i||(i=this.updateLightingMask()),i&&this.setChanged(),++this.uniforms.get("frame").value}get normalBuffer(){return this.uniforms.get("normalBuffer").value}set normalBuffer(e){this.uniforms.get("normalBuffer").value=e}get irradianceTexture(){return this.uniforms.get("irradiance_texture").value}set irradianceTexture(e){this.uniforms.get("irradiance_texture").value=e}get scatteringTexture(){return this.uniforms.get("scattering_texture").value}set scatteringTexture(e){this.uniforms.get("scattering_texture").value=e}get transmittanceTexture(){return this.uniforms.get("transmittance_texture").value}set transmittanceTexture(e){this.uniforms.get("transmittance_texture").value=e}get singleMieScatteringTexture(){return this.uniforms.get("single_mie_scattering_texture").value}set singleMieScatteringTexture(e){this.uniforms.get("single_mie_scattering_texture").value=e,this.combinedScatteringTextures=e==null}get higherOrderScatteringTexture(){return this.uniforms.get("higher_order_scattering_texture").value}set higherOrderScatteringTexture(e){this.uniforms.get("higher_order_scattering_texture").value=e,this.hasHigherOrderScatteringTexture=e!=null}get ellipsoid(){return this._ellipsoid}set ellipsoid(e){this._ellipsoid=e,this.uniforms.get("ellipsoidRadii").value.copy(e.radii)}get worldToECEFMatrix(){return this.uniforms.get("worldToECEFMatrix").value}get sunDirection(){return this.uniforms.get("sunDirection").value}get sunIrradiance(){return this.sunLight}set sunIrradiance(e){this.sunLight=e}get skyIrradiance(){return this.skyLight}set skyIrradiance(e){this.skyLight=e}get irradianceScale(){return this.albedoScale}set irradianceScale(e){this.albedoScale=e}get albedoScale(){return this.uniforms.get("albedoScale").value}set albedoScale(e){this.uniforms.get("albedoScale").value=e}get moonDirection(){return this.uniforms.get("moonDirection").value}get moonAngularRadius(){return this.uniforms.get("moonAngularRadius").value}set moonAngularRadius(e){this.uniforms.get("moonAngularRadius").value=e}get lunarRadianceScale(){return this.uniforms.get("lunarRadianceScale").value}set lunarRadianceScale(e){this.uniforms.get("lunarRadianceScale").value=e}get stbnTexture(){return this.uniforms.get("stbnTexture").value}set stbnTexture(e){this.uniforms.get("stbnTexture").value=e}get shadowRadius(){return this.uniforms.get("shadowRadius").value}set shadowRadius(e){this.uniforms.get("shadowRadius").value=e}}U([f.define("OCT_ENCODED_NORMAL")],I.prototype,"octEncodedNormal");U([f.define("RECONSTRUCT_NORMAL")],I.prototype,"reconstructNormal");U([f.define("COMBINED_SCATTERING_TEXTURES")],I.prototype,"combinedScatteringTextures");U([f.define("HAS_HIGHER_ORDER_SCATTERING_TEXTURE")],I.prototype,"hasHigherOrderScatteringTexture");U([f.define("CORRECT_GEOMETRIC_ERROR")],I.prototype,"correctGeometricError");U([f.define("SUN_LIGHT")],I.prototype,"sunLight");U([f.define("SKY_LIGHT")],I.prototype,"skyLight");U([f.define("TRANSMITTANCE")],I.prototype,"transmittance");U([f.define("INSCATTER")],I.prototype,"inscatter");U([f.define("SKY")],I.prototype,"sky");U([f.define("SUN")],I.prototype,"sun");U([f.define("MOON")],I.prototype,"moon");U([f.define("GROUND")],I.prototype,"ground");U([f.defineInt("SHADOW_SAMPLE_COUNT",{min:1,max:16})],I.prototype,"shadowSampleCount");var It=Object.defineProperty,$e=(n,e,t,r)=>{for(var i=void 0,s=n.length-1,o;s>=0;s--)(o=n[s])&&(i=o(e,t,i)||i);return i&&It(e,t,i),i};const Pt=new a.Vector3;function Nt(n,e){let t="",r="";for(let i=1;i<e;++i)t+=`layout(location = ${i}) out float renderTarget${i};
`,r+=`renderTarget${i} = 0.0;
`;return n.replace("#include <mrt_layout>",t).replace("#include <mrt_output>",r)}const Q0={ellipsoid:f.Ellipsoid.WGS84,correctAltitude:!0,renderTargetCount:1};class D0 extends a.RawShaderMaterial{constructor(e,t=X.DEFAULT){const{irradianceTexture:r=null,scatteringTexture:i=null,transmittanceTexture:s=null,singleMieScatteringTexture:o=null,higherOrderScatteringTexture:u=null,ellipsoid:c,correctAltitude:d,sunDirection:h,sunAngularRadius:m,renderTargetCount:g,...T}={...Q0,...e};super({toneMapped:!1,depthWrite:!1,depthTest:!1,...T,uniforms:{cameraPosition:new a.Uniform(new a.Vector3),worldToECEFMatrix:new a.Uniform(new a.Matrix4),altitudeCorrection:new a.Uniform(new a.Vector3),sunDirection:new a.Uniform((h==null?void 0:h.clone())??new a.Vector3),ATMOSPHERE:t.toUniform(),SUN_SPECTRAL_RADIANCE_TO_LUMINANCE:new a.Uniform(t.sunRadianceToRelativeLuminance),SKY_SPECTRAL_RADIANCE_TO_LUMINANCE:new a.Uniform(t.skyRadianceToRelativeLuminance),irradiance_texture:new a.Uniform(r),scattering_texture:new a.Uniform(i),transmittance_texture:new a.Uniform(s),single_mie_scattering_texture:new a.Uniform(null),higher_order_scattering_texture:new a.Uniform(null),...T.uniforms},defines:{PI:`${Math.PI}`,TRANSMITTANCE_TEXTURE_WIDTH:t0.toFixed(0),TRANSMITTANCE_TEXTURE_HEIGHT:n0.toFixed(0),SCATTERING_TEXTURE_R_SIZE:M0.toFixed(0),SCATTERING_TEXTURE_MU_SIZE:w0.toFixed(0),SCATTERING_TEXTURE_MU_S_SIZE:y0.toFixed(0),SCATTERING_TEXTURE_NU_SIZE:C0.toFixed(0),IRRADIANCE_TEXTURE_WIDTH:Q.toFixed(0),IRRADIANCE_TEXTURE_HEIGHT:e0.toFixed(0),METER_TO_LENGTH_UNIT:A0.toFixed(7),...T.defines}}),this.atmosphere=t,this.combinedScatteringTextures=!1,this.hasHigherOrderScatteringTexture=!1,this.singleMieScatteringTexture=o,this.higherOrderScatteringTexture=u,this.ellipsoid=c,this.correctAltitude=d,m!=null&&(this.sunAngularRadius=m),this.renderTargetCount=g}copyCameraSettings(e){const t=this.uniforms,r=e.getWorldPosition(t.cameraPosition.value),i=Pt.copy(r).applyMatrix4(t.worldToECEFMatrix.value),s=t.altitudeCorrection.value;this.correctAltitude?J0(i,this.atmosphere.bottomRadius,this.ellipsoid,s):s.setScalar(0)}onBeforeCompile(e,t){e.fragmentShader=Nt(e.fragmentShader,this.renderTargetCount)}onBeforeRender(e,t,r,i,s,o){this.copyCameraSettings(r)}get irradianceTexture(){return this.uniforms.irradiance_texture.value}set irradianceTexture(e){this.uniforms.irradiance_texture.value=e}get scatteringTexture(){return this.uniforms.scattering_texture.value}set scatteringTexture(e){this.uniforms.scattering_texture.value=e}get transmittanceTexture(){return this.uniforms.transmittance_texture.value}set transmittanceTexture(e){this.uniforms.transmittance_texture.value=e}get singleMieScatteringTexture(){return this.uniforms.single_mie_scattering_texture.value}set singleMieScatteringTexture(e){this.uniforms.single_mie_scattering_texture.value=e,this.combinedScatteringTextures=e==null}get higherOrderScatteringTexture(){return this.uniforms.higher_order_scattering_texture.value}set higherOrderScatteringTexture(e){this.uniforms.higher_order_scattering_texture.value=e,this.hasHigherOrderScatteringTexture=e!=null}get worldToECEFMatrix(){return this.uniforms.worldToECEFMatrix.value}get sunDirection(){return this.uniforms.sunDirection.value}get sunAngularRadius(){return this.uniforms.ATMOSPHERE.value.sun_angular_radius}set sunAngularRadius(e){this.uniforms.ATMOSPHERE.value.sun_angular_radius=e}get renderTargetCount(){return this._renderTargetCount}set renderTargetCount(e){e!==this.renderTargetCount&&(this._renderTargetCount=e,this.needsUpdate=!0)}}$e([f.define("COMBINED_SCATTERING_TEXTURES")],D0.prototype,"combinedScatteringTextures");$e([f.define("HAS_HIGHER_ORDER_SCATTERING_TEXTURE")],D0.prototype,"hasHigherOrderScatteringTexture");/**
    @preserve

    Astronomy library for JavaScript (browser and Node.js).
    https://github.com/cosinekitty/astronomy

    MIT License

    Copyright (c) 2019-2023 Don Cross <cosinekitty@gmail.com>

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
*//**
 * @fileoverview Astronomy calculation library for browser scripting and Node.js.
 * @author Don Cross <cosinekitty@gmail.com>
 * @license MIT
 */const Ut=173.1446326846693,qe=14959787069098932e-8,o0=.017453292519943295,Ot=365.24217,Pe=new Date("2000-01-01T12:00:00Z"),B=2*Math.PI,K=3600*(180/Math.PI),f0=484813681109536e-20,Lt=10800*60,Ht=2*Lt,Gt=6378.1366,bt=Gt/qe,Ft=81.30056,xe=.0002959122082855911,de=2825345909524226e-22,he=8459715185680659e-23,me=1292024916781969e-23,fe=1524358900784276e-23;function j0(n){if(!Number.isFinite(n))throw console.trace(),`Value is not a finite number: ${n}`;return n}function d0(n){return n-Math.floor(n)}var E;(function(n){n.Sun="Sun",n.Moon="Moon",n.Mercury="Mercury",n.Venus="Venus",n.Earth="Earth",n.Mars="Mars",n.Jupiter="Jupiter",n.Saturn="Saturn",n.Uranus="Uranus",n.Neptune="Neptune",n.Pluto="Pluto",n.SSB="SSB",n.EMB="EMB",n.Star1="Star1",n.Star2="Star2",n.Star3="Star3",n.Star4="Star4",n.Star5="Star5",n.Star6="Star6",n.Star7="Star7",n.Star8="Star8"})(E||(E={}));const kt=[E.Star1,E.Star2,E.Star3,E.Star4,E.Star5,E.Star6,E.Star7,E.Star8],Vt=[{ra:0,dec:0,dist:0},{ra:0,dec:0,dist:0},{ra:0,dec:0,dist:0},{ra:0,dec:0,dist:0},{ra:0,dec:0,dist:0},{ra:0,dec:0,dist:0},{ra:0,dec:0,dist:0},{ra:0,dec:0,dist:0}];function zt(n){const e=kt.indexOf(n);return e>=0?Vt[e]:null}function Ze(n){const e=zt(n);return e&&e.dist>0?e:null}var j;(function(n){n[n.From2000=0]="From2000",n[n.Into2000=1]="Into2000"})(j||(j={}));const g0={Mercury:[[[[4.40250710144,0,0],[.40989414977,1.48302034195,26087.9031415742],[.050462942,4.47785489551,52175.8062831484],[.00855346844,1.16520322459,78263.70942472259],[.00165590362,4.11969163423,104351.61256629678],[.00034561897,.77930768443,130439.51570787099],[7583476e-11,3.71348404924,156527.41884944518]],[[26087.90313685529,0,0],[.01131199811,6.21874197797,26087.9031415742],[.00292242298,3.04449355541,52175.8062831484],[.00075775081,6.08568821653,78263.70942472259],[.00019676525,2.80965111777,104351.61256629678]]],[[[.11737528961,1.98357498767,26087.9031415742],[.02388076996,5.03738959686,52175.8062831484],[.01222839532,3.14159265359,0],[.0054325181,1.79644363964,78263.70942472259],[.0012977877,4.83232503958,104351.61256629678],[.00031866927,1.58088495658,130439.51570787099],[7963301e-11,4.60972126127,156527.41884944518]],[[.00274646065,3.95008450011,26087.9031415742],[.00099737713,3.14159265359,0]]],[[[.39528271651,0,0],[.07834131818,6.19233722598,26087.9031415742],[.00795525558,2.95989690104,52175.8062831484],[.00121281764,6.01064153797,78263.70942472259],[.00021921969,2.77820093972,104351.61256629678],[4354065e-11,5.82894543774,130439.51570787099]],[[.0021734774,4.65617158665,26087.9031415742],[.00044141826,1.42385544001,52175.8062831484]]]],Venus:[[[[3.17614666774,0,0],[.01353968419,5.59313319619,10213.285546211],[.00089891645,5.30650047764,20426.571092422],[5477194e-11,4.41630661466,7860.4193924392],[3455741e-11,2.6996444782,11790.6290886588],[2372061e-11,2.99377542079,3930.2096962196],[1317168e-11,5.18668228402,26.2983197998],[1664146e-11,4.25018630147,1577.3435424478],[1438387e-11,4.15745084182,9683.5945811164],[1200521e-11,6.15357116043,30639.856638633]],[[10213.28554621638,0,0],[.00095617813,2.4640651111,10213.285546211],[7787201e-11,.6247848222,20426.571092422]]],[[[.05923638472,.26702775812,10213.285546211],[.00040107978,1.14737178112,20426.571092422],[.00032814918,3.14159265359,0]],[[.00287821243,1.88964962838,10213.285546211]]],[[[.72334820891,0,0],[.00489824182,4.02151831717,10213.285546211],[1658058e-11,4.90206728031,20426.571092422],[1378043e-11,1.12846591367,11790.6290886588],[1632096e-11,2.84548795207,7860.4193924392],[498395e-11,2.58682193892,9683.5945811164],[221985e-11,2.01346696541,19367.1891622328],[237454e-11,2.55136053886,15720.8387848784]],[[.00034551041,.89198706276,10213.285546211]]]],Earth:[[[[1.75347045673,0,0],[.03341656453,4.66925680415,6283.0758499914],[.00034894275,4.62610242189,12566.1516999828],[3417572e-11,2.82886579754,3.523118349],[3497056e-11,2.74411783405,5753.3848848968],[3135899e-11,3.62767041756,77713.7714681205],[2676218e-11,4.41808345438,7860.4193924392],[2342691e-11,6.13516214446,3930.2096962196],[1273165e-11,2.03709657878,529.6909650946],[1324294e-11,.74246341673,11506.7697697936],[901854e-11,2.04505446477,26.2983197998],[1199167e-11,1.10962946234,1577.3435424478],[857223e-11,3.50849152283,398.1490034082],[779786e-11,1.17882681962,5223.6939198022],[99025e-10,5.23268072088,5884.9268465832],[753141e-11,2.53339052847,5507.5532386674],[505267e-11,4.58292599973,18849.2275499742],[492392e-11,4.20505711826,775.522611324],[356672e-11,2.91954114478,.0673103028],[284125e-11,1.89869240932,796.2980068164],[242879e-11,.34481445893,5486.777843175],[317087e-11,5.84901948512,11790.6290886588],[271112e-11,.31486255375,10977.078804699],[206217e-11,4.80646631478,2544.3144198834],[205478e-11,1.86953770281,5573.1428014331],[202318e-11,2.45767790232,6069.7767545534],[126225e-11,1.08295459501,20.7753954924],[155516e-11,.83306084617,213.299095438]],[[6283.0758499914,0,0],[.00206058863,2.67823455808,6283.0758499914],[4303419e-11,2.63512233481,12566.1516999828]],[[8721859e-11,1.07253635559,6283.0758499914]]],[[],[[.00227777722,3.4137662053,6283.0758499914],[3805678e-11,3.37063423795,12566.1516999828]]],[[[1.00013988784,0,0],[.01670699632,3.09846350258,6283.0758499914],[.00013956024,3.05524609456,12566.1516999828],[308372e-10,5.19846674381,77713.7714681205],[1628463e-11,1.17387558054,5753.3848848968],[1575572e-11,2.84685214877,7860.4193924392],[924799e-11,5.45292236722,11506.7697697936],[542439e-11,4.56409151453,3930.2096962196],[47211e-10,3.66100022149,5884.9268465832],[85831e-11,1.27079125277,161000.6857376741],[57056e-11,2.01374292245,83996.84731811189],[55736e-11,5.2415979917,71430.69561812909],[174844e-11,3.01193636733,18849.2275499742],[243181e-11,4.2734953079,11790.6290886588]],[[.00103018607,1.10748968172,6283.0758499914],[1721238e-11,1.06442300386,12566.1516999828]],[[4359385e-11,5.78455133808,6283.0758499914]]]],Mars:[[[[6.20347711581,0,0],[.18656368093,5.0503710027,3340.6124266998],[.01108216816,5.40099836344,6681.2248533996],[.00091798406,5.75478744667,10021.8372800994],[.00027744987,5.97049513147,3.523118349],[.00010610235,2.93958560338,2281.2304965106],[.00012315897,.84956094002,2810.9214616052],[8926784e-11,4.15697846427,.0172536522],[8715691e-11,6.11005153139,13362.4497067992],[6797556e-11,.36462229657,398.1490034082],[7774872e-11,3.33968761376,5621.8429232104],[3575078e-11,1.6618650571,2544.3144198834],[4161108e-11,.22814971327,2942.4634232916],[3075252e-11,.85696614132,191.4482661116],[2628117e-11,.64806124465,3337.0893083508],[2937546e-11,6.07893711402,.0673103028],[2389414e-11,5.03896442664,796.2980068164],[2579844e-11,.02996736156,3344.1355450488],[1528141e-11,1.14979301996,6151.533888305],[1798806e-11,.65634057445,529.6909650946],[1264357e-11,3.62275122593,5092.1519581158],[1286228e-11,3.06796065034,2146.1654164752],[1546404e-11,2.91579701718,1751.539531416],[1024902e-11,3.69334099279,8962.4553499102],[891566e-11,.18293837498,16703.062133499],[858759e-11,2.4009381194,2914.0142358238],[832715e-11,2.46418619474,3340.5951730476],[83272e-10,4.49495782139,3340.629680352],[712902e-11,3.66335473479,1059.3819301892],[748723e-11,3.82248614017,155.4203994342],[723861e-11,.67497311481,3738.761430108],[635548e-11,2.92182225127,8432.7643848156],[655162e-11,.48864064125,3127.3133312618],[550474e-11,3.81001042328,.9803210682],[55275e-10,4.47479317037,1748.016413067],[425966e-11,.55364317304,6283.0758499914],[415131e-11,.49662285038,213.299095438],[472167e-11,3.62547124025,1194.4470102246],[306551e-11,.38052848348,6684.7479717486],[312141e-11,.99853944405,6677.7017350506],[293198e-11,4.22131299634,20.7753954924],[302375e-11,4.48618007156,3532.0606928114],[274027e-11,.54222167059,3340.545116397],[281079e-11,5.88163521788,1349.8674096588],[231183e-11,1.28242156993,3870.3033917944],[283602e-11,5.7688543494,3149.1641605882],[236117e-11,5.75503217933,3333.498879699],[274033e-11,.13372524985,3340.6797370026],[299395e-11,2.78323740866,6254.6266625236]],[[3340.61242700512,0,0],[.01457554523,3.60433733236,3340.6124266998],[.00168414711,3.92318567804,6681.2248533996],[.00020622975,4.26108844583,10021.8372800994],[3452392e-11,4.7321039319,3.523118349],[2586332e-11,4.60670058555,13362.4497067992],[841535e-11,4.45864030426,2281.2304965106]],[[.00058152577,2.04961712429,3340.6124266998],[.00013459579,2.45738706163,6681.2248533996]]],[[[.03197134986,3.76832042431,3340.6124266998],[.00298033234,4.10616996305,6681.2248533996],[.00289104742,0,0],[.00031365539,4.4465105309,10021.8372800994],[34841e-9,4.7881254926,13362.4497067992]],[[.00217310991,6.04472194776,3340.6124266998],[.00020976948,3.14159265359,0],[.00012834709,1.60810667915,6681.2248533996]]],[[[1.53033488271,0,0],[.1418495316,3.47971283528,3340.6124266998],[.00660776362,3.81783443019,6681.2248533996],[.00046179117,4.15595316782,10021.8372800994],[8109733e-11,5.55958416318,2810.9214616052],[7485318e-11,1.77239078402,5621.8429232104],[5523191e-11,1.3643630377,2281.2304965106],[382516e-10,4.49407183687,13362.4497067992],[2306537e-11,.09081579001,2544.3144198834],[1999396e-11,5.36059617709,3337.0893083508],[2484394e-11,4.9254563992,2942.4634232916],[1960195e-11,4.74249437639,3344.1355450488],[1167119e-11,2.11260868341,5092.1519581158],[1102816e-11,5.00908403998,398.1490034082],[899066e-11,4.40791133207,529.6909650946],[992252e-11,5.83861961952,6151.533888305],[807354e-11,2.10217065501,1059.3819301892],[797915e-11,3.44839203899,796.2980068164],[740975e-11,1.49906336885,2146.1654164752]],[[.01107433345,2.03250524857,3340.6124266998],[.00103175887,2.37071847807,6681.2248533996],[128772e-9,0,0],[.0001081588,2.70888095665,10021.8372800994]],[[.00044242249,.47930604954,3340.6124266998],[8138042e-11,.86998389204,6681.2248533996]]]],Jupiter:[[[[.59954691494,0,0],[.09695898719,5.06191793158,529.6909650946],[.00573610142,1.44406205629,7.1135470008],[.00306389205,5.41734730184,1059.3819301892],[.00097178296,4.14264726552,632.7837393132],[.00072903078,3.64042916389,522.5774180938],[.00064263975,3.41145165351,103.0927742186],[.00039806064,2.29376740788,419.4846438752],[.00038857767,1.27231755835,316.3918696566],[.00027964629,1.7845459182,536.8045120954],[.0001358973,5.7748104079,1589.0728952838],[8246349e-11,3.5822792584,206.1855484372],[8768704e-11,3.63000308199,949.1756089698],[7368042e-11,5.0810119427,735.8765135318],[626315e-10,.02497628807,213.299095438],[6114062e-11,4.51319998626,1162.4747044078],[4905396e-11,1.32084470588,110.2063212194],[5305285e-11,1.30671216791,14.2270940016],[5305441e-11,4.18625634012,1052.2683831884],[4647248e-11,4.69958103684,3.9321532631],[3045023e-11,4.31676431084,426.598190876],[2609999e-11,1.56667394063,846.0828347512],[2028191e-11,1.06376530715,3.1813937377],[1764763e-11,2.14148655117,1066.49547719],[1722972e-11,3.88036268267,1265.5674786264],[1920945e-11,.97168196472,639.897286314],[1633223e-11,3.58201833555,515.463871093],[1431999e-11,4.29685556046,625.6701923124],[973272e-11,4.09764549134,95.9792272178]],[[529.69096508814,0,0],[.00489503243,4.2208293947,529.6909650946],[.00228917222,6.02646855621,7.1135470008],[.00030099479,4.54540782858,1059.3819301892],[.0002072092,5.45943156902,522.5774180938],[.00012103653,.16994816098,536.8045120954],[6067987e-11,4.42422292017,103.0927742186],[5433968e-11,3.98480737746,419.4846438752],[4237744e-11,5.89008707199,14.2270940016]],[[.00047233601,4.32148536482,7.1135470008],[.00030649436,2.929777887,529.6909650946],[.00014837605,3.14159265359,0]]],[[[.02268615702,3.55852606721,529.6909650946],[.00109971634,3.90809347197,1059.3819301892],[.00110090358,0,0],[8101428e-11,3.60509572885,522.5774180938],[6043996e-11,4.25883108339,1589.0728952838],[6437782e-11,.30627119215,536.8045120954]],[[.00078203446,1.52377859742,529.6909650946]]],[[[5.20887429326,0,0],[.25209327119,3.49108639871,529.6909650946],[.00610599976,3.84115365948,1059.3819301892],[.00282029458,2.57419881293,632.7837393132],[.00187647346,2.07590383214,522.5774180938],[.00086792905,.71001145545,419.4846438752],[.00072062974,.21465724607,536.8045120954],[.00065517248,5.9799588479,316.3918696566],[.00029134542,1.67759379655,103.0927742186],[.00030135335,2.16132003734,949.1756089698],[.00023453271,3.54023522184,735.8765135318],[.00022283743,4.19362594399,1589.0728952838],[.00023947298,.2745803748,7.1135470008],[.00013032614,2.96042965363,1162.4747044078],[970336e-10,1.90669633585,206.1855484372],[.00012749023,2.71550286592,1052.2683831884],[7057931e-11,2.18184839926,1265.5674786264],[6137703e-11,6.26418240033,846.0828347512],[2616976e-11,2.00994012876,1581.959348283]],[[.0127180152,2.64937512894,529.6909650946],[.00061661816,3.00076460387,1059.3819301892],[.00053443713,3.89717383175,522.5774180938],[.00031185171,4.88276958012,536.8045120954],[.00041390269,0,0]]]],Saturn:[[[[.87401354025,0,0],[.11107659762,3.96205090159,213.299095438],[.01414150957,4.58581516874,7.1135470008],[.00398379389,.52112032699,206.1855484372],[.00350769243,3.30329907896,426.598190876],[.00206816305,.24658372002,103.0927742186],[792713e-9,3.84007056878,220.4126424388],[.00023990355,4.66976924553,110.2063212194],[.00016573588,.43719228296,419.4846438752],[.00014906995,5.76903183869,316.3918696566],[.0001582029,.93809155235,632.7837393132],[.00014609559,1.56518472,3.9321532631],[.00013160301,4.44891291899,14.2270940016],[.00015053543,2.71669915667,639.897286314],[.00013005299,5.98119023644,11.0457002639],[.00010725067,3.12939523827,202.2533951741],[5863206e-11,.23656938524,529.6909650946],[5227757e-11,4.20783365759,3.1813937377],[6126317e-11,1.76328667907,277.0349937414],[5019687e-11,3.17787728405,433.7117378768],[459255e-10,.61977744975,199.0720014364],[4005867e-11,2.24479718502,63.7358983034],[2953796e-11,.98280366998,95.9792272178],[387367e-10,3.22283226966,138.5174968707],[2461186e-11,2.03163875071,735.8765135318],[3269484e-11,.77492638211,949.1756089698],[1758145e-11,3.2658010994,522.5774180938],[1640172e-11,5.5050445305,846.0828347512],[1391327e-11,4.02333150505,323.5054166574],[1580648e-11,4.37265307169,309.2783226558],[1123498e-11,2.83726798446,415.5524906121],[1017275e-11,3.71700135395,227.5261894396],[848642e-11,3.1915017083,209.3669421749]],[[213.2990952169,0,0],[.01297370862,1.82834923978,213.299095438],[.00564345393,2.88499717272,7.1135470008],[.00093734369,1.06311793502,426.598190876],[.00107674962,2.27769131009,206.1855484372],[.00040244455,2.04108104671,220.4126424388],[.00019941774,1.2795439047,103.0927742186],[.00010511678,2.7488034213,14.2270940016],[6416106e-11,.38238295041,639.897286314],[4848994e-11,2.43037610229,419.4846438752],[4056892e-11,2.92133209468,110.2063212194],[3768635e-11,3.6496533078,3.9321532631]],[[.0011644133,1.17988132879,7.1135470008],[.00091841837,.0732519584,213.299095438],[.00036661728,0,0],[.00015274496,4.06493179167,206.1855484372]]],[[[.04330678039,3.60284428399,213.299095438],[.00240348302,2.85238489373,426.598190876],[.00084745939,0,0],[.00030863357,3.48441504555,220.4126424388],[.00034116062,.57297307557,206.1855484372],[.0001473407,2.11846596715,639.897286314],[9916667e-11,5.79003188904,419.4846438752],[6993564e-11,4.7360468972,7.1135470008],[4807588e-11,5.43305312061,316.3918696566]],[[.00198927992,4.93901017903,213.299095438],[.00036947916,3.14159265359,0],[.00017966989,.5197943111,426.598190876]]],[[[9.55758135486,0,0],[.52921382865,2.39226219573,213.299095438],[.01873679867,5.2354960466,206.1855484372],[.01464663929,1.64763042902,426.598190876],[.00821891141,5.93520042303,316.3918696566],[.00547506923,5.0153261898,103.0927742186],[.0037168465,2.27114821115,220.4126424388],[.00361778765,3.13904301847,7.1135470008],[.00140617506,5.70406606781,632.7837393132],[.00108974848,3.29313390175,110.2063212194],[.00069006962,5.94099540992,419.4846438752],[.00061053367,.94037691801,639.897286314],[.00048913294,1.55733638681,202.2533951741],[.00034143772,.19519102597,277.0349937414],[.00032401773,5.47084567016,949.1756089698],[.00020936596,.46349251129,735.8765135318],[9796004e-11,5.20477537945,1265.5674786264],[.00011993338,5.98050967385,846.0828347512],[208393e-9,1.52102476129,433.7117378768],[.00015298404,3.0594381494,529.6909650946],[6465823e-11,.17732249942,1052.2683831884],[.00011380257,1.7310542704,522.5774180938],[3419618e-11,4.94550542171,1581.959348283]],[[.0618298134,.2584351148,213.299095438],[.00506577242,.71114625261,206.1855484372],[.00341394029,5.79635741658,426.598190876],[.00188491195,.47215589652,220.4126424388],[.00186261486,3.14159265359,0],[.00143891146,1.40744822888,7.1135470008]],[[.00436902572,4.78671677509,213.299095438]]]],Uranus:[[[[5.48129294297,0,0],[.09260408234,.89106421507,74.7815985673],[.01504247898,3.6271926092,1.4844727083],[.00365981674,1.89962179044,73.297125859],[.00272328168,3.35823706307,149.5631971346],[.00070328461,5.39254450063,63.7358983034],[.00068892678,6.09292483287,76.2660712756],[.00061998615,2.26952066061,2.9689454166],[.00061950719,2.85098872691,11.0457002639],[.0002646877,3.14152083966,71.8126531507],[.00025710476,6.11379840493,454.9093665273],[.0002107885,4.36059339067,148.0787244263],[.00017818647,1.74436930289,36.6485629295],[.00014613507,4.73732166022,3.9321532631],[.00011162509,5.8268179635,224.3447957019],[.0001099791,.48865004018,138.5174968707],[9527478e-11,2.95516862826,35.1640902212],[7545601e-11,5.236265824,109.9456887885],[4220241e-11,3.23328220918,70.8494453042],[40519e-9,2.277550173,151.0476698429],[3354596e-11,1.0654900738,4.4534181249],[2926718e-11,4.62903718891,9.5612275556],[349034e-10,5.48306144511,146.594251718],[3144069e-11,4.75199570434,77.7505439839],[2922333e-11,5.35235361027,85.8272988312],[2272788e-11,4.36600400036,70.3281804424],[2051219e-11,1.51773566586,.1118745846],[2148602e-11,.60745949945,38.1330356378],[1991643e-11,4.92437588682,277.0349937414],[1376226e-11,2.04283539351,65.2203710117],[1666902e-11,3.62744066769,380.12776796],[1284107e-11,3.11347961505,202.2533951741],[1150429e-11,.93343589092,3.1813937377],[1533221e-11,2.58594681212,52.6901980395],[1281604e-11,.54271272721,222.8603229936],[1372139e-11,4.19641530878,111.4301614968],[1221029e-11,.1990065003,108.4612160802],[946181e-11,1.19253165736,127.4717966068],[1150989e-11,4.17898916639,33.6796175129]],[[74.7815986091,0,0],[.00154332863,5.24158770553,74.7815985673],[.00024456474,1.71260334156,1.4844727083],[9258442e-11,.4282973235,11.0457002639],[8265977e-11,1.50218091379,63.7358983034],[915016e-10,1.41213765216,149.5631971346]]],[[[.01346277648,2.61877810547,74.7815985673],[623414e-9,5.08111189648,149.5631971346],[.00061601196,3.14159265359,0],[9963722e-11,1.61603805646,76.2660712756],[992616e-10,.57630380333,73.297125859]],[[.00034101978,.01321929936,74.7815985673]]],[[[19.21264847206,0,0],[.88784984413,5.60377527014,74.7815985673],[.03440836062,.32836099706,73.297125859],[.0205565386,1.7829515933,149.5631971346],[.0064932241,4.52247285911,76.2660712756],[.00602247865,3.86003823674,63.7358983034],[.00496404167,1.40139935333,454.9093665273],[.00338525369,1.58002770318,138.5174968707],[.00243509114,1.57086606044,71.8126531507],[.00190522303,1.99809394714,1.4844727083],[.00161858838,2.79137786799,148.0787244263],[.00143706183,1.38368544947,11.0457002639],[.00093192405,.17437220467,36.6485629295],[.00071424548,4.24509236074,224.3447957019],[.00089806014,3.66105364565,109.9456887885],[.00039009723,1.66971401684,70.8494453042],[.00046677296,1.39976401694,35.1640902212],[.00039025624,3.36234773834,277.0349937414],[.00036755274,3.88649278513,146.594251718],[.00030348723,.70100838798,151.0476698429],[.00029156413,3.180563367,77.7505439839],[.00022637073,.72518687029,529.6909650946],[.00011959076,1.7504339214,984.6003316219],[.00025620756,5.25656086672,380.12776796]],[[.01479896629,3.67205697578,74.7815985673]]]],Neptune:[[[[5.31188633046,0,0],[.0179847553,2.9010127389,38.1330356378],[.01019727652,.48580922867,1.4844727083],[.00124531845,4.83008090676,36.6485629295],[.00042064466,5.41054993053,2.9689454166],[.00037714584,6.09221808686,35.1640902212],[.00033784738,1.24488874087,76.2660712756],[.00016482741,7727998e-11,491.5579294568],[9198584e-11,4.93747051954,39.6175083461],[899425e-10,.27462171806,175.1660598002]],[[38.13303563957,0,0],[.00016604172,4.86323329249,1.4844727083],[.00015744045,2.27887427527,38.1330356378]]],[[[.03088622933,1.44104372644,38.1330356378],[.00027780087,5.91271884599,76.2660712756],[.00027623609,0,0],[.00015355489,2.52123799551,36.6485629295],[.00015448133,3.50877079215,39.6175083461]]],[[[30.07013205828,0,0],[.27062259632,1.32999459377,38.1330356378],[.01691764014,3.25186135653,36.6485629295],[.00807830553,5.18592878704,1.4844727083],[.0053776051,4.52113935896,35.1640902212],[.00495725141,1.5710564165,491.5579294568],[.00274571975,1.84552258866,175.1660598002],[.0001201232,1.92059384991,1021.2488945514],[.00121801746,5.79754470298,76.2660712756],[.00100896068,.3770272493,73.297125859],[.00135134092,3.37220609835,39.6175083461],[7571796e-11,1.07149207335,388.4651552382]]]]};function Bt(n){var e,t,r,i,s,o,u;const c=2e3+(n-14)/Ot;return c<-500?(e=(c-1820)/100,-20+32*e*e):c<500?(e=c/100,t=e*e,r=e*t,i=t*t,s=t*r,o=r*r,10583.6-1014.41*e+33.78311*t-5.952053*r-.1798452*i+.022174192*s+.0090316521*o):c<1600?(e=(c-1e3)/100,t=e*e,r=e*t,i=t*t,s=t*r,o=r*r,1574.2-556.01*e+71.23472*t+.319781*r-.8503463*i-.005050998*s+.0083572073*o):c<1700?(e=c-1600,t=e*e,r=e*t,120-.9808*e-.01532*t+r/7129):c<1800?(e=c-1700,t=e*e,r=e*t,i=t*t,8.83+.1603*e-.0059285*t+13336e-8*r-i/1174e3):c<1860?(e=c-1800,t=e*e,r=e*t,i=t*t,s=t*r,o=r*r,u=r*i,13.72-.332447*e+.0068612*t+.0041116*r-37436e-8*i+121272e-10*s-1699e-10*o+875e-12*u):c<1900?(e=c-1860,t=e*e,r=e*t,i=t*t,s=t*r,7.62+.5737*e-.251754*t+.01680668*r-.0004473624*i+s/233174):c<1920?(e=c-1900,t=e*e,r=e*t,i=t*t,-2.79+1.494119*e-.0598939*t+.0061966*r-197e-6*i):c<1941?(e=c-1920,t=e*e,r=e*t,21.2+.84493*e-.0761*t+.0020936*r):c<1961?(e=c-1950,t=e*e,r=e*t,29.07+.407*e-t/233+r/2547):c<1986?(e=c-1975,t=e*e,r=e*t,45.45+1.067*e-t/260-r/718):c<2005?(e=c-2e3,t=e*e,r=e*t,i=t*t,s=t*r,63.86+.3345*e-.060374*t+.0017275*r+651814e-9*i+2373599e-11*s):c<2050?(e=c-2e3,62.92+.32217*e+.005589*e*e):c<2150?(e=(c-1820)/100,-20+32*e*e-.5628*(2150-c)):(e=(c-1820)/100,-20+32*e*e)}let Wt=Bt;function Ne(n){return n+Wt(n)/86400}class J{constructor(e){if(e instanceof J){this.date=e.date,this.ut=e.ut,this.tt=e.tt;return}const t=1e3*3600*24;if(e instanceof Date&&Number.isFinite(e.getTime())){this.date=e,this.ut=(e.getTime()-Pe.getTime())/t,this.tt=Ne(this.ut);return}if(Number.isFinite(e)){this.date=new Date(Pe.getTime()+e*t),this.ut=e,this.tt=Ne(this.ut);return}throw"Argument must be a Date object, an AstroTime object, or a numeric UTC Julian date."}static FromTerrestrialTime(e){let t=new J(e);for(;;){const r=e-t.tt;if(Math.abs(r)<1e-12)return t;t=t.AddDays(r)}}toString(){return this.date.toISOString()}AddDays(e){return new J(this.ut+e)}}function c0(n){return n instanceof J?n:new J(n)}function Xt(n){function e(g){return g%Ht*f0}const t=n.tt/36525,r=e(128710479305e-5+t*1295965810481e-4),i=e(335779.526232+t*17395272628478e-4),s=e(107226070369e-5+t*1602961601209e-3),o=e(450160.398036-t*69628905431e-4);let u=Math.sin(o),c=Math.cos(o),d=(-172064161-174666*t)*u+33386*c,h=(92052331+9086*t)*c+15377*u,m=2*(i-s+o);return u=Math.sin(m),c=Math.cos(m),d+=(-13170906-1675*t)*u-13696*c,h+=(5730336-3015*t)*c-4587*u,m=2*(i+o),u=Math.sin(m),c=Math.cos(m),d+=(-2276413-234*t)*u+2796*c,h+=(978459-485*t)*c+1374*u,m=2*o,u=Math.sin(m),c=Math.cos(m),d+=(2074554+207*t)*u-698*c,h+=(-897492+470*t)*c-291*u,u=Math.sin(r),c=Math.cos(r),d+=(1475877-3633*t)*u+11817*c,h+=(73871-184*t)*c-1924*u,{dpsi:-135e-6+d*1e-7,deps:388e-6+h*1e-7}}function Je(n){var e=n.tt/36525,t=((((-434e-10*e-576e-9)*e+.0020034)*e-1831e-7)*e-46.836769)*e+84381.406;return t/3600}var V0;function Qe(n){if(!V0||Math.abs(V0.tt-n.tt)>1e-6){const e=Xt(n),t=Je(n),r=t+e.deps/3600;V0={tt:n.tt,dpsi:e.dpsi,deps:e.deps,ee:e.dpsi*Math.cos(t*o0)/15,mobl:t,tobl:r}}return V0}function jt(n,e){const t=n*o0,r=Math.cos(t),i=Math.sin(t);return[e[0],e[1]*r-e[2]*i,e[1]*i+e[2]*r]}function Yt(n,e){return jt(Je(n),e)}function Kt(n){const e=n.tt/36525;function t(S,R){const M=[];let w;for(w=0;w<=R-S;++w)M.push(0);return{min:S,array:M}}function r(S,R,M,w){const y=[];for(let Y=0;Y<=R-S;++Y)y.push(t(M,w));return{min:S,array:y}}function i(S,R,M){const w=S.array[R-S.min];return w.array[M-w.min]}function s(S,R,M,w){const y=S.array[R-S.min];y.array[M-y.min]=w}let o,u,c,d,h,m,g,T,p,v,x,C,P,N,O,G,V,b,P0,v0,N0,U0,r0,O0=r(-6,6,1,4),L0=r(-6,6,1,4);function u0(S,R){return i(O0,S,R)}function H0(S,R){return i(L0,S,R)}function G0(S,R,M){return s(O0,S,R,M)}function b0(S,R,M){return s(L0,S,R,M)}function De(S,R,M,w,y){y(S*M-R*w,R*M+S*w)}function A(S){return Math.sin(B*S)}g=e*e,p=0,r0=0,x=0,C=3422.7;var F0=A(.19833+.05611*e),ne=A(.27869+.04508*e),re=A(.16827-.36903*e),ie=A(.34734-5.37261*e),ae=A(.10498-5.37899*e),k0=A(.42681-.41855*e),ft=A(.14943-5.37511*e);for(b=.84*F0+.31*ne+14.27*re+7.26*ie+.28*ae+.24*k0,P0=2.94*F0+.31*ne+14.27*re+9.34*ie+1.12*ae+.83*k0,v0=-6.4*F0-1.89*k0,N0=.21*F0+.31*ne+14.27*re-88.7*ie-15.3*ae+.24*k0-1.86*ft,U0=b-v0,T=-3332e-9*A(.59734-5.37261*e)-539e-9*A(.35498-5.37899*e)-64e-9*A(.39943-5.37511*e),P=B*d0(.60643382+1336.85522467*e-313e-8*g)+b/K,N=B*d0(.37489701+1325.55240982*e+2565e-8*g)+P0/K,O=B*d0(.99312619+99.99735956*e-44e-8*g)+v0/K,G=B*d0(.25909118+1342.2278298*e-892e-8*g)+N0/K,V=B*d0(.82736186+1236.85308708*e-397e-8*g)+U0/K,h=1;h<=4;++h){switch(h){case 1:c=N,u=4,d=1.000002208;break;case 2:c=O,u=3,d=.997504612-.002495388*e;break;case 3:c=G,u=4,d=1.000002708+139.978*T;break;case 4:c=V,u=6,d=1;break;default:throw`Internal error: I = ${h}`}for(G0(0,h,1),G0(1,h,Math.cos(c)*d),b0(0,h,0),b0(1,h,Math.sin(c)*d),m=2;m<=u;++m)De(u0(m-1,h),H0(m-1,h),u0(1,h),H0(1,h),(S,R)=>(G0(m,h,S),b0(m,h,R)));for(m=1;m<=u;++m)G0(-m,h,u0(m,h)),b0(-m,h,-H0(m,h))}function Ie(S,R,M,w){for(var y={x:1,y:0},Y=[0,S,R,M,w],z=1;z<=4;++z)Y[z]!==0&&De(y.x,y.y,u0(Y[z],z),H0(Y[z],z),(oe,l0)=>(y.x=oe,y.y=l0));return y}function l(S,R,M,w,y,Y,z,oe){var l0=Ie(y,Y,z,oe);p+=S*l0.y,r0+=R*l0.y,x+=M*l0.x,C+=w*l0.x}l(13.902,14.06,-.001,.2607,0,0,0,4),l(.403,-4.01,.394,.0023,0,0,0,3),l(2369.912,2373.36,.601,28.2333,0,0,0,2),l(-125.154,-112.79,-.725,-.9781,0,0,0,1),l(1.979,6.98,-.445,.0433,1,0,0,4),l(191.953,192.72,.029,3.0861,1,0,0,2),l(-8.466,-13.51,.455,-.1093,1,0,0,1),l(22639.5,22609.07,.079,186.5398,1,0,0,0),l(18.609,3.59,-.094,.0118,1,0,0,-1),l(-4586.465,-4578.13,-.077,34.3117,1,0,0,-2),l(3.215,5.44,.192,-.0386,1,0,0,-3),l(-38.428,-38.64,.001,.6008,1,0,0,-4),l(-.393,-1.43,-.092,.0086,1,0,0,-6),l(-.289,-1.59,.123,-.0053,0,1,0,4),l(-24.42,-25.1,.04,-.3,0,1,0,2),l(18.023,17.93,.007,.1494,0,1,0,1),l(-668.146,-126.98,-1.302,-.3997,0,1,0,0),l(.56,.32,-.001,-.0037,0,1,0,-1),l(-165.145,-165.06,.054,1.9178,0,1,0,-2),l(-1.877,-6.46,-.416,.0339,0,1,0,-4),l(.213,1.02,-.074,.0054,2,0,0,4),l(14.387,14.78,-.017,.2833,2,0,0,2),l(-.586,-1.2,.054,-.01,2,0,0,1),l(769.016,767.96,.107,10.1657,2,0,0,0),l(1.75,2.01,-.018,.0155,2,0,0,-1),l(-211.656,-152.53,5.679,-.3039,2,0,0,-2),l(1.225,.91,-.03,-.0088,2,0,0,-3),l(-30.773,-34.07,-.308,.3722,2,0,0,-4),l(-.57,-1.4,-.074,.0109,2,0,0,-6),l(-2.921,-11.75,.787,-.0484,1,1,0,2),l(1.267,1.52,-.022,.0164,1,1,0,1),l(-109.673,-115.18,.461,-.949,1,1,0,0),l(-205.962,-182.36,2.056,1.4437,1,1,0,-2),l(.233,.36,.012,-.0025,1,1,0,-3),l(-4.391,-9.66,-.471,.0673,1,1,0,-4),l(.283,1.53,-.111,.006,1,-1,0,4),l(14.577,31.7,-1.54,.2302,1,-1,0,2),l(147.687,138.76,.679,1.1528,1,-1,0,0),l(-1.089,.55,.021,0,1,-1,0,-1),l(28.475,23.59,-.443,-.2257,1,-1,0,-2),l(-.276,-.38,-.006,-.0036,1,-1,0,-3),l(.636,2.27,.146,-.0102,1,-1,0,-4),l(-.189,-1.68,.131,-.0028,0,2,0,2),l(-7.486,-.66,-.037,-.0086,0,2,0,0),l(-8.096,-16.35,-.74,.0918,0,2,0,-2),l(-5.741,-.04,0,-9e-4,0,0,2,2),l(.255,0,0,0,0,0,2,1),l(-411.608,-.2,0,-.0124,0,0,2,0),l(.584,.84,0,.0071,0,0,2,-1),l(-55.173,-52.14,0,-.1052,0,0,2,-2),l(.254,.25,0,-.0017,0,0,2,-3),l(.025,-1.67,0,.0031,0,0,2,-4),l(1.06,2.96,-.166,.0243,3,0,0,2),l(36.124,50.64,-1.3,.6215,3,0,0,0),l(-13.193,-16.4,.258,-.1187,3,0,0,-2),l(-1.187,-.74,.042,.0074,3,0,0,-4),l(-.293,-.31,-.002,.0046,3,0,0,-6),l(-.29,-1.45,.116,-.0051,2,1,0,2),l(-7.649,-10.56,.259,-.1038,2,1,0,0),l(-8.627,-7.59,.078,-.0192,2,1,0,-2),l(-2.74,-2.54,.022,.0324,2,1,0,-4),l(1.181,3.32,-.212,.0213,2,-1,0,2),l(9.703,11.67,-.151,.1268,2,-1,0,0),l(-.352,-.37,.001,-.0028,2,-1,0,-1),l(-2.494,-1.17,-.003,-.0017,2,-1,0,-2),l(.36,.2,-.012,-.0043,2,-1,0,-4),l(-1.167,-1.25,.008,-.0106,1,2,0,0),l(-7.412,-6.12,.117,.0484,1,2,0,-2),l(-.311,-.65,-.032,.0044,1,2,0,-4),l(.757,1.82,-.105,.0112,1,-2,0,2),l(2.58,2.32,.027,.0196,1,-2,0,0),l(2.533,2.4,-.014,-.0212,1,-2,0,-2),l(-.344,-.57,-.025,.0036,0,3,0,-2),l(-.992,-.02,0,0,1,0,2,2),l(-45.099,-.02,0,-.001,1,0,2,0),l(-.179,-9.52,0,-.0833,1,0,2,-2),l(-.301,-.33,0,.0014,1,0,2,-4),l(-6.382,-3.37,0,-.0481,1,0,-2,2),l(39.528,85.13,0,-.7136,1,0,-2,0),l(9.366,.71,0,-.0112,1,0,-2,-2),l(.202,.02,0,0,1,0,-2,-4),l(.415,.1,0,.0013,0,1,2,0),l(-2.152,-2.26,0,-.0066,0,1,2,-2),l(-1.44,-1.3,0,.0014,0,1,-2,2),l(.384,-.04,0,0,0,1,-2,-2),l(1.938,3.6,-.145,.0401,4,0,0,0),l(-.952,-1.58,.052,-.013,4,0,0,-2),l(-.551,-.94,.032,-.0097,3,1,0,0),l(-.482,-.57,.005,-.0045,3,1,0,-2),l(.681,.96,-.026,.0115,3,-1,0,0),l(-.297,-.27,.002,-9e-4,2,2,0,-2),l(.254,.21,-.003,0,2,-2,0,-2),l(-.25,-.22,.004,.0014,1,3,0,-2),l(-3.996,0,0,4e-4,2,0,2,0),l(.557,-.75,0,-.009,2,0,2,-2),l(-.459,-.38,0,-.0053,2,0,-2,2),l(-1.298,.74,0,4e-4,2,0,-2,0),l(.538,1.14,0,-.0141,2,0,-2,-2),l(.263,.02,0,0,1,1,2,0),l(.426,.07,0,-6e-4,1,1,-2,-2),l(-.304,.03,0,3e-4,1,-1,2,0),l(-.372,-.19,0,-.0027,1,-1,-2,2),l(.418,0,0,0,0,0,4,0),l(-.33,-.04,0,0,3,0,2,0);function F(S,R,M,w,y){return S*Ie(R,M,w,y).y}v=0,v+=F(-526.069,0,0,1,-2),v+=F(-3.352,0,0,1,-4),v+=F(44.297,1,0,1,-2),v+=F(-6,1,0,1,-4),v+=F(20.599,-1,0,1,0),v+=F(-30.598,-1,0,1,-2),v+=F(-24.649,-2,0,1,0),v+=F(-2,-2,0,1,-2),v+=F(-22.571,0,1,1,-2),v+=F(10.985,0,-1,1,-2),p+=.82*A(.7736-62.5512*e)+.31*A(.0466-125.1025*e)+.35*A(.5785-25.1042*e)+.66*A(.4591+1335.8075*e)+.64*A(.313-91.568*e)+1.14*A(.148+1331.2898*e)+.21*A(.5918+1056.5859*e)+.44*A(.5784+1322.8595*e)+.24*A(.2275-5.7374*e)+.28*A(.2965+2.6929*e)+.33*A(.3132+6.3368*e),o=G+r0/K;let gt=(1.000002708+139.978*T)*(18518.511+1.189+x)*Math.sin(o)-6.24*Math.sin(3*o)+v;return{geo_eclip_lon:B*d0((P+p/K)/B),geo_eclip_lat:Math.PI/(180*3600)*gt,distance_au:K*bt/(.999953253*C)}}function $t(n,e){return[n.rot[0][0]*e[0]+n.rot[1][0]*e[1]+n.rot[2][0]*e[2],n.rot[0][1]*e[0]+n.rot[1][1]*e[1]+n.rot[2][1]*e[2],n.rot[0][2]*e[0]+n.rot[1][2]*e[1]+n.rot[2][2]*e[2]]}function qt(n,e,t){const r=et(e,t);return $t(r,n)}function et(n,e){const t=n.tt/36525;let r=84381.406,i=((((-951e-10*t+132851e-9)*t-.00114045)*t-1.0790069)*t+5038.481507)*t,s=((((3337e-10*t-467e-9)*t-.00772503)*t+.0512623)*t-.025754)*t+r,o=((((-56e-9*t+170663e-9)*t-.00121197)*t-2.3814292)*t+10.556403)*t;r*=f0,i*=f0,s*=f0,o*=f0;const u=Math.sin(r),c=Math.cos(r),d=Math.sin(-i),h=Math.cos(-i),m=Math.sin(-s),g=Math.cos(-s),T=Math.sin(o),p=Math.cos(o),v=p*h-d*T*g,x=p*d*c+T*g*h*c-u*T*m,C=p*d*u+T*g*h*u+c*T*m,P=-T*h-d*p*g,N=-T*d*c+p*g*h*c-u*p*m,O=-T*d*u+p*g*h*u+c*p*m,G=d*m,V=-m*h*c-u*g,b=-m*h*u+g*c;if(e===j.Into2000)return new E0([[v,x,C],[P,N,O],[G,V,b]]);if(e===j.From2000)return new E0([[v,P,G],[x,N,V],[C,O,b]]);throw"Invalid precess direction"}function Zt(n){const e=.779057273264+.00273781191135448*n.ut,t=n.ut%1;let r=360*((e+t)%1);return r<0&&(r+=360),r}let z0;function Jt(n){if(!z0||z0.tt!==n.tt){const e=n.tt/36525;let t=15*Qe(n).ee;const r=Zt(n);let s=((t+.014506+((((-368e-10*e-29956e-9)*e-44e-8)*e+1.3915817)*e+4612.156534)*e)/3600+r)%360/15;s<0&&(s+=24),z0={tt:n.tt,st:s}}return z0.st}function Qt(n){const e=c0(n);return Jt(e)}function en(n,e){const t=Qe(n),r=t.mobl*o0,i=t.tobl*o0,s=t.dpsi*f0,o=Math.cos(r),u=Math.sin(r),c=Math.cos(i),d=Math.sin(i),h=Math.cos(s),m=Math.sin(s),g=h,T=-m*o,p=-m*u,v=m*c,x=h*o*c+u*d,C=h*u*c-o*d,P=m*d,N=h*o*d-u*c,O=h*u*d+o*c;if(e===j.From2000)return new E0([[g,v,P],[T,x,N],[p,C,O]]);if(e===j.Into2000)return new E0([[g,T,p],[v,x,C],[P,N,O]]);throw"Invalid precess direction"}class H{constructor(e,t,r,i){this.x=e,this.y=t,this.z=r,this.t=i}Length(){return Math.hypot(this.x,this.y,this.z)}}class tn{constructor(e,t,r,i,s,o,u){this.x=e,this.y=t,this.z=r,this.vx=i,this.vy=s,this.vz=o,this.t=u}}class nn{constructor(e,t,r){this.lat=j0(e),this.lon=j0(t),this.dist=j0(r)}}class E0{constructor(e){this.rot=e}}function ge(n){const e=c0(n),t=Kt(e),r=t.distance_au*Math.cos(t.geo_eclip_lat),i=[r*Math.cos(t.geo_eclip_lon),r*Math.sin(t.geo_eclip_lon),t.distance_au*Math.sin(t.geo_eclip_lat)],s=Yt(e,i),o=qt(s,e,j.Into2000);return new H(o[0],o[1],o[2],e)}function T0(n,e,t){let r=1,i=0;for(let s of n){let o=0;for(let[c,d,h]of s)o+=c*Math.cos(d+e*h);let u=r*o;t&&(u%=B),i+=u,r*=e}return i}function se(n,e){let t=1,r=0,i=0,s=0;for(let o of n){let u=0,c=0;for(let[d,h,m]of o){let g=h+e*m;u+=d*m*Math.sin(g),s>0&&(c+=d*Math.cos(g))}i+=s*r*c-t*u,r=t,t*=e,++s}return i}const R0=365250,pe=0,Te=1,Se=2;function Ee(n){return new D(n[0]+44036e-11*n[1]-190919e-12*n[2],-479966e-12*n[0]+.917482137087*n[1]-.397776982902*n[2],.397776982902*n[1]+.917482137087*n[2])}function tt(n,e,t){const r=t*Math.cos(e),i=Math.cos(n),s=Math.sin(n);return[r*i,r*s,t*Math.sin(e)]}function Y0(n,e){const t=e.tt/R0,r=T0(n[pe],t,!0),i=T0(n[Te],t,!1),s=T0(n[Se],t,!1),o=tt(r,i,s);return Ee(o).ToAstroVector(e)}function rn(n,e){const t=e/R0,r=T0(n[pe],t,!0),i=T0(n[Te],t,!1),s=T0(n[Se],t,!1),o=se(n[pe],t),u=se(n[Te],t),c=se(n[Se],t),d=Math.cos(r),h=Math.sin(r),m=Math.cos(i),g=Math.sin(i),T=+(c*m*d)-s*g*d*u-s*m*h*o,p=+(c*m*h)-s*g*h*u+s*m*d*o,v=+(c*g)+s*m*u,x=tt(r,i,s),C=[T/R0,p/R0,v/R0],P=Ee(x),N=Ee(C);return new s0(e,P,N)}function B0(n,e,t,r){const i=r/(r+xe),s=Y0(g0[t],e);n.x+=i*s.x,n.y+=i*s.y,n.z+=i*s.z}function an(n){const e=new H(0,0,0,n);return B0(e,n,E.Jupiter,de),B0(e,n,E.Saturn,he),B0(e,n,E.Uranus,me),B0(e,n,E.Neptune,fe),e}const ve=51,on=29200,p0=146,W=201,a0=[[-73e4,[-26.118207232108,-14.376168177825,3.384402515299],[.0016339372163656,-.0027861699588508,-.0013585880229445]],[-700800,[41.974905202127,-.448502952929,-12.770351505989],[.00073458569351457,.0022785014891658,.00048619778602049]],[-671600,[14.706930780744,44.269110540027,9.353698474772],[-.00210001479998,.00022295915939915,.00070143443551414]],[-642400,[-29.441003929957,-6.43016153057,6.858481011305],[.00084495803960544,-.0030783914758711,-.0012106305981192]],[-613200,[39.444396946234,-6.557989760571,-13.913760296463],[.0011480029005873,.0022400006880665,.00035168075922288]],[-584e3,[20.2303809507,43.266966657189,7.382966091923],[-.0019754081700585,.00053457141292226,.00075929169129793]],[-554800,[-30.65832536462,2.093818874552,9.880531138071],[61010603013347e-18,-.0031326500935382,-.00099346125151067]],[-525600,[35.737703251673,-12.587706024764,-14.677847247563],[.0015802939375649,.0021347678412429,.00019074436384343]],[-496400,[25.466295188546,41.367478338417,5.216476873382],[-.0018054401046468,.0008328308359951,.00080260156912107]],[-467200,[-29.847174904071,10.636426313081,12.297904180106],[-.00063257063052907,-.0029969577578221,-.00074476074151596]],[-438e3,[30.774692107687,-18.236637015304,-14.945535879896],[.0020113162005465,.0019353827024189,-20937793168297e-19]],[-408800,[30.243153324028,38.656267888503,2.938501750218],[-.0016052508674468,.0011183495337525,.00083333973416824]],[-379600,[-27.288984772533,18.643162147874,14.023633623329],[-.0011856388898191,-.0027170609282181,-.00049015526126399]],[-350400,[24.519605196774,-23.245756064727,-14.626862367368],[.0024322321483154,.0016062008146048,-.00023369181613312]],[-321200,[34.505274805875,35.125338586954,.557361475637],[-.0013824391637782,.0013833397561817,.00084823598806262]],[-292e3,[-23.275363915119,25.818514298769,15.055381588598],[-.0016062295460975,-.0023395961498533,-.00024377362639479]],[-262800,[17.050384798092,-27.180376290126,-13.608963321694],[.0028175521080578,.0011358749093955,-.00049548725258825]],[-233600,[38.093671910285,30.880588383337,-1.843688067413],[-.0011317697153459,.0016128814698472,.00084177586176055]],[-204400,[-18.197852930878,31.932869934309,15.438294826279],[-.0019117272501813,-.0019146495909842,-19657304369835e-18]],[-175200,[8.528924039997,-29.618422200048,-11.805400994258],[.0031034370787005,.0005139363329243,-.00077293066202546]],[-146e3,[40.94685725864,25.904973592021,-4.256336240499],[-.00083652705194051,.0018129497136404,.0008156422827306]],[-116800,[-12.326958895325,36.881883446292,15.217158258711],[-.0021166103705038,-.001481442003599,.00017401209844705]],[-87600,[-.633258375909,-30.018759794709,-9.17193287495],[.0032016994581737,-.00025279858672148,-.0010411088271861]],[-58400,[42.936048423883,20.344685584452,-6.588027007912],[-.00050525450073192,.0019910074335507,.00077440196540269]],[-29200,[-5.975910552974,40.61180995846,14.470131723673],[-.0022184202156107,-.0010562361130164,.00033652250216211]],[0,[-9.875369580774,-27.978926224737,-5.753711824704],[.0030287533248818,-.0011276087003636,-.0012651326732361]],[29200,[43.958831986165,14.214147973292,-8.808306227163],[-.00014717608981871,.0021404187242141,.00071486567806614]],[58400,[.67813676352,43.094461639362,13.243238780721],[-.0022358226110718,-.00063233636090933,.00047664798895648]],[87600,[-18.282602096834,-23.30503958666,-1.766620508028],[.0025567245263557,-.0019902940754171,-.0013943491701082]],[116800,[43.873338744526,7.700705617215,-10.814273666425],[.00023174803055677,.0022402163127924,.00062988756452032]],[146e3,[7.392949027906,44.382678951534,11.629500214854],[-.002193281545383,-.00021751799585364,.00059556516201114]],[175200,[-24.981690229261,-16.204012851426,2.466457544298],[.001819398914958,-.0026765419531201,-.0013848283502247]],[204400,[42.530187039511,.845935508021,-12.554907527683],[.00065059779150669,.0022725657282262,.00051133743202822]],[233600,[13.999526486822,44.462363044894,9.669418486465],[-.0021079296569252,.00017533423831993,.00069128485798076]],[262800,[-29.184024803031,-7.371243995762,6.493275957928],[.00093581363109681,-.0030610357109184,-.0012364201089345]],[292e3,[39.831980671753,-6.078405766765,-13.909815358656],[.0011117769689167,.0022362097830152,.00036230548231153]],[321200,[20.294955108476,43.417190420251,7.450091985932],[-.0019742157451535,.00053102050468554,.00075938408813008]],[350400,[-30.66999230216,2.318743558955,9.973480913858],[45605107450676e-18,-.0031308219926928,-.00099066533301924]],[379600,[35.626122155983,-12.897647509224,-14.777586508444],[.0016015684949743,.0021171931182284,.00018002516202204]],[408800,[26.133186148561,41.232139187599,5.00640132622],[-.0017857704419579,.00086046232702817,.00080614690298954]],[438e3,[-29.57674022923,11.863535943587,12.631323039872],[-.00072292830060955,-.0029587820140709,-.000708242964503]],[467200,[29.910805787391,-19.159019294,-15.013363865194],[.0020871080437997,.0018848372554514,-38528655083926e-18]],[496400,[31.375957451819,38.050372720763,2.433138343754],[-.0015546055556611,.0011699815465629,.00083565439266001]],[525600,[-26.360071336928,20.662505904952,14.414696258958],[-.0013142373118349,-.0026236647854842,-.00042542017598193]],[554800,[22.599441488648,-24.508879898306,-14.484045731468],[.0025454108304806,.0014917058755191,-.00030243665086079]],[584e3,[35.877864013014,33.894226366071,-.224524636277],[-.0012941245730845,.0014560427668319,.00084762160640137]],[613200,[-21.538149762417,28.204068269761,15.321973799534],[-.001731211740901,-.0021939631314577,-.0001631691327518]],[642400,[13.971521374415,-28.339941764789,-13.083792871886],[.0029334630526035,.00091860931752944,-.00059939422488627]],[671600,[39.526942044143,28.93989736011,-2.872799527539],[-.0010068481658095,.001702113288809,.00083578230511981]],[700800,[-15.576200701394,34.399412961275,15.466033737854],[-.0020098814612884,-.0017191109825989,70414782780416e-18]],[73e4,[4.24325283709,-30.118201690825,-10.707441231349],[.0031725847067411,.0001609846120227,-.00090672150593868]]];class D{constructor(e,t,r){this.x=e,this.y=t,this.z=r}clone(){return new D(this.x,this.y,this.z)}ToAstroVector(e){return new H(this.x,this.y,this.z,e)}static zero(){return new D(0,0,0)}quadrature(){return this.x*this.x+this.y*this.y+this.z*this.z}add(e){return new D(this.x+e.x,this.y+e.y,this.z+e.z)}sub(e){return new D(this.x-e.x,this.y-e.y,this.z-e.z)}incr(e){this.x+=e.x,this.y+=e.y,this.z+=e.z}decr(e){this.x-=e.x,this.y-=e.y,this.z-=e.z}mul(e){return new D(e*this.x,e*this.y,e*this.z)}div(e){return new D(this.x/e,this.y/e,this.z/e)}mean(e){return new D((this.x+e.x)/2,(this.y+e.y)/2,(this.z+e.z)/2)}neg(){return new D(-this.x,-this.y,-this.z)}}class s0{constructor(e,t,r){this.tt=e,this.r=t,this.v=r}clone(){return new s0(this.tt,this.r,this.v)}sub(e){return new s0(this.tt,this.r.sub(e.r),this.v.sub(e.v))}}function sn(n){let[e,[t,r,i],[s,o,u]]=n;return new s0(e,new D(t,r,i),new D(s,o,u))}function W0(n,e,t,r){const i=r/(r+xe),s=rn(g0[t],e);return n.r.incr(s.r.mul(i)),n.v.incr(s.v.mul(i)),s}function _0(n,e,t){const r=t.sub(n),i=r.quadrature();return r.mul(e/(i*Math.sqrt(i)))}class Ae{constructor(e){let t=new s0(e,new D(0,0,0),new D(0,0,0));this.Jupiter=W0(t,e,E.Jupiter,de),this.Saturn=W0(t,e,E.Saturn,he),this.Uranus=W0(t,e,E.Uranus,me),this.Neptune=W0(t,e,E.Neptune,fe),this.Jupiter.r.decr(t.r),this.Jupiter.v.decr(t.v),this.Saturn.r.decr(t.r),this.Saturn.v.decr(t.v),this.Uranus.r.decr(t.r),this.Uranus.v.decr(t.v),this.Neptune.r.decr(t.r),this.Neptune.v.decr(t.v),this.Sun=new s0(e,t.r.mul(-1),t.v.mul(-1))}Acceleration(e){let t=_0(e,xe,this.Sun.r);return t.incr(_0(e,de,this.Jupiter.r)),t.incr(_0(e,he,this.Saturn.r)),t.incr(_0(e,me,this.Uranus.r)),t.incr(_0(e,fe,this.Neptune.r)),t}}class ee{constructor(e,t,r,i){this.tt=e,this.r=t,this.v=r,this.a=i}clone(){return new ee(this.tt,this.r.clone(),this.v.clone(),this.a.clone())}}class nt{constructor(e,t){this.bary=e,this.grav=t}}function K0(n,e,t,r){return new D(e.x+n*(t.x+n*r.x/2),e.y+n*(t.y+n*r.y/2),e.z+n*(t.z+n*r.z/2))}function Ue(n,e,t){return new D(e.x+n*t.x,e.y+n*t.y,e.z+n*t.z)}function _e(n,e){const t=n-e.tt,r=new Ae(n),i=K0(t,e.r,e.v,e.a),s=r.Acceleration(i).mean(e.a),o=K0(t,e.r,e.v,s),u=e.v.add(s.mul(t)),c=r.Acceleration(o),d=new ee(n,o,u,c);return new nt(r,d)}const cn=[];function rt(n,e){const t=Math.floor(n);return t<0?0:t>=e?e-1:t}function Re(n){const e=sn(n),t=new Ae(e.tt),r=e.r.add(t.Sun.r),i=e.v.add(t.Sun.v),s=t.Acceleration(r),o=new ee(e.tt,r,i,s);return new nt(t,o)}function un(n,e){const t=a0[0][0];if(e<t||e>a0[ve-1][0])return null;const r=rt((e-t)/on,ve-1);if(!n[r]){const s=n[r]=[];s[0]=Re(a0[r]).grav,s[W-1]=Re(a0[r+1]).grav;let o,u=s[0].tt;for(o=1;o<W-1;++o)s[o]=_e(u+=p0,s[o-1]).grav;u=s[W-1].tt;var i=[];for(i[W-1]=s[W-1],o=W-2;o>0;--o)i[o]=_e(u-=p0,i[o+1]).grav;for(o=W-2;o>0;--o){const c=o/(W-1);s[o].r=s[o].r.mul(1-c).add(i[o].r.mul(c)),s[o].v=s[o].v.mul(1-c).add(i[o].v.mul(c)),s[o].a=s[o].a.mul(1-c).add(i[o].a.mul(c))}}return n[r]}function Oe(n,e,t){let r=Re(n);const i=Math.ceil((e-r.grav.tt)/t);for(let s=0;s<i;++s)r=_e(s+1===i?e:r.grav.tt+t,r.grav);return r}function ln(n,e){let t,r,i;const s=un(cn,n.tt);if(s){const o=rt((n.tt-s[0].tt)/p0,W-1),u=s[o],c=s[o+1],d=u.a.mean(c.a),h=K0(n.tt-u.tt,u.r,u.v,d),m=Ue(n.tt-u.tt,u.v,d),g=K0(n.tt-c.tt,c.r,c.v,d),T=Ue(n.tt-c.tt,c.v,d),p=(n.tt-u.tt)/p0;t=h.mul(1-p).add(g.mul(p)),r=m.mul(1-p).add(T.mul(p))}else{let o;n.tt<a0[0][0]?o=Oe(a0[0],n.tt,-p0):o=Oe(a0[ve-1],n.tt,+p0),t=o.grav.r,r=o.grav.v,i=o.bary}return i||(i=new Ae(n.tt)),t=t.sub(i.Sun.r),r=r.sub(i.Sun.v),new tn(t.x,t.y,t.z,r.x,r.y,r.z,n)}function x0(n,e){var t=c0(e);if(n in g0)return Y0(g0[n],t);if(n===E.Pluto){const o=ln(t);return new H(o.x,o.y,o.z,t)}if(n===E.Sun)return new H(0,0,0,t);if(n===E.Moon){var r=Y0(g0.Earth,t),i=ge(t);return new H(r.x+i.x,r.y+i.y,r.z+i.z,t)}if(n===E.EMB){const o=Y0(g0.Earth,t),u=ge(t),c=1+Ft;return new H(o.x+u.x/c,o.y+u.y/c,o.z+u.z/c,t)}if(n===E.SSB)return an(t);const s=Ze(n);if(s){const o=new nn(s.dec,15*s.ra,s.dist);return Tn(o,t)}throw`HelioVector: Unknown body "${n}"`}function dn(n,e){let t=e,r=0;for(let i=0;i<10;++i){const s=n(t),o=s.Length()/Ut;if(o>1)throw"Object is too distant for light-travel solver.";const u=e.AddDays(-o);if(r=Math.abs(u.tt-t.tt),r<1e-9)return s;t=u}throw`Light-travel time solver did not converge: dt = ${r}`}class hn{constructor(e,t,r,i){this.observerBody=e,this.targetBody=t,this.aberration=r,this.observerPos=i}Position(e){this.aberration&&(this.observerPos=x0(this.observerBody,e));const t=x0(this.targetBody,e);return new H(t.x-this.observerPos.x,t.y-this.observerPos.y,t.z-this.observerPos.z,e)}}function mn(n,e,t,r){const i=c0(n);if(Ze(t)){const u=x0(t,i),c=x0(e,i);return new H(u.x-c.x,u.y-c.y,u.z-c.z,i)}let s;s=x0(e,i);const o=new hn(e,t,r,s);return dn(u=>o.Position(u),i)}function fn(n,e,t){const r=c0(e);switch(n){case E.Earth:return new H(0,0,0,r);case E.Moon:return ge(r);default:const i=mn(r,E.Earth,n,t);return i.t=r,i}}var Le;(function(n){n[n.Pericenter=0]="Pericenter",n[n.Apocenter=1]="Apocenter"})(Le||(Le={}));function gn(n,e){return new E0([[e.rot[0][0]*n.rot[0][0]+e.rot[1][0]*n.rot[0][1]+e.rot[2][0]*n.rot[0][2],e.rot[0][1]*n.rot[0][0]+e.rot[1][1]*n.rot[0][1]+e.rot[2][1]*n.rot[0][2],e.rot[0][2]*n.rot[0][0]+e.rot[1][2]*n.rot[0][1]+e.rot[2][2]*n.rot[0][2]],[e.rot[0][0]*n.rot[1][0]+e.rot[1][0]*n.rot[1][1]+e.rot[2][0]*n.rot[1][2],e.rot[0][1]*n.rot[1][0]+e.rot[1][1]*n.rot[1][1]+e.rot[2][1]*n.rot[1][2],e.rot[0][2]*n.rot[1][0]+e.rot[1][2]*n.rot[1][1]+e.rot[2][2]*n.rot[1][2]],[e.rot[0][0]*n.rot[2][0]+e.rot[1][0]*n.rot[2][1]+e.rot[2][0]*n.rot[2][2],e.rot[0][1]*n.rot[2][0]+e.rot[1][1]*n.rot[2][1]+e.rot[2][1]*n.rot[2][2],e.rot[0][2]*n.rot[2][0]+e.rot[1][2]*n.rot[2][1]+e.rot[2][2]*n.rot[2][2]]])}function pn(n,e,t){const r=j0(t)*o0,i=Math.cos(r),s=Math.sin(r),o=(e+1)%3,u=(e+2)%3,c=e;let d=[[0,0,0],[0,0,0],[0,0,0]];return d[o][o]=i*n.rot[o][o]-s*n.rot[o][u],d[o][u]=s*n.rot[o][o]+i*n.rot[o][u],d[o][c]=n.rot[o][c],d[u][o]=i*n.rot[u][o]-s*n.rot[u][u],d[u][u]=s*n.rot[u][o]+i*n.rot[u][u],d[u][c]=n.rot[u][c],d[c][o]=i*n.rot[c][o]-s*n.rot[c][u],d[c][u]=s*n.rot[c][o]+i*n.rot[c][u],d[c][c]=n.rot[c][c],new E0(d)}function Tn(n,e){e=c0(e);const t=n.lat*o0,r=n.lon*o0,i=n.dist*Math.cos(t);return new H(i*Math.cos(r),i*Math.sin(r),n.dist*Math.sin(t),e)}function Sn(n){n=c0(n);const e=et(n,j.From2000),t=en(n,j.From2000);return gn(e,t)}var He;(function(n){n.Penumbral="penumbral",n.Partial="partial",n.Annular="annular",n.Total="total"})(He||(He={}));var Ge;(function(n){n[n.Invalid=0]="Invalid",n[n.Ascending=1]="Ascending",n[n.Descending=-1]="Descending"})(Ge||(Ge={}));const En=.001/qe,vn=new a.Vector3,_n=new a.Matrix4,be=new a.Matrix4;function I0(n){return n instanceof J?n:new J(n instanceof Date?n:new Date(n))}function Me(n,e=new a.Matrix4){const t=I0(n),{rot:r}=pn(Sn(t),2,-15*Qt(t));return e.set(r[0][0],r[1][0],r[2][0],0,r[0][1],r[1][1],r[2][1],0,r[0][2],r[1][2],r[2][2],0,0,0,0,1)}function we(n,e,t,r,i){const{x:s,y:o,z:u}=fn(n,e,!1);if(t.set(s,o,u),r!=null){const c=i!=null?be.copy(i).transpose():Me(e,be).transpose();t.sub(vn.copy(r).applyMatrix4(c).multiplyScalar(En))}return t.normalize()}function it(n,e,t,r){const i=Me(e,_n);return we(n,e,t,r,i),t.applyMatrix4(i)}function Rn(n,e=new a.Vector3,t){return we(E.Sun,I0(n),e,t)}function xn(n,e=new a.Vector3,t){return we(E.Moon,I0(n),e,t)}function An(n,e=new a.Vector3,t){return it(E.Sun,I0(n),e,t)}function Mn(n,e=new a.Vector3,t){return it(E.Moon,I0(n),e,t)}function at(n){return Math.sqrt(Math.max(n,0))}function wn(n){return Math.max(n,0)}function yn(n,e,t){const{bottomRadius:r}=n;return t<0&&e**2*(t**2-1)+r**2>=0}function Cn(n,e,t){const{topRadius:r}=n,i=e**2*(t**2-1)+r**2;return wn(-e*t+at(i))}function $0(n,e){return .5/e+n*(1-1/e)}const Dn=new a.Vector3,Fe=new a.Vector3,In=new a.Vector3,ke=new WeakMap;function Pn(n){let e=f.isTypedArray(n.image.data)?n.image.data:f.isTypedArray(n.userData.imageData)?n.userData.imageData:void 0;if(n.type===a.HalfFloatType&&e instanceof Uint16Array){const t=ke.get(e.buffer);t==null?(e=new f.Float16Array(e.buffer),ke.set(e.buffer,e)):e=t}return e}function X0(n,e,t){const r=e*4;return t.set(n[r],n[r+1],n[r+2])}function ot(n,e,t){const r=Pn(n);if(r==null)return t.setScalar(0);const{width:i,height:s}=n.image,o=f.clamp(e.x,0,1)*(i-1),u=f.clamp(e.y,0,1)*(s-1),c=Math.floor(o),d=Math.floor(u),h=o-c,m=u-d,g=h,T=m,p=c%i,v=(p+1)%i,x=d%s,C=(x+1)%s,P=X0(r,x*i+p,Dn),N=X0(r,x*i+v,Fe),O=P.lerp(N,g),G=X0(r,C*i+p,Fe),V=X0(r,C*i+v,In),b=G.lerp(V,g);return t.copy(O.lerp(b,T))}function Nn(n,e,t,r){const{topRadius:i,bottomRadius:s}=n,o=Math.sqrt(i**2-s**2),u=at(e**2-s**2),c=Cn(n,e,t),d=i-e,h=u+o,m=(c-d)/(h-d),g=u/o;return r.set($0(m,t0),$0(g,n0))}const Un=new a.Vector3,ce=new a.Vector3,On=new a.Vector2;function st(n,e,t,r=new a.Color,{ellipsoid:i=f.Ellipsoid.WGS84,correctAltitude:s=!0}={},o=X.DEFAULT){const u=Un.copy(e);if(s){const p=i.projectOnSurface(e,ce);p!=null&&u.sub(i.getOsculatingSphereCenter(p,o.bottomRadius,ce))}const c=ce;let d=u.length(),h=u.dot(t);const{topRadius:m}=o,g=-h-Math.sqrt(h**2-d**2+m**2);if(g>0&&(d=m,h+=g),d>m)c.set(1,1,1);else{const p=h/d;if(yn(o,d,p))c.setScalar(0);else{const x=Nn(o,d,p,On);ot(n,x,c)}}const T=c.multiply(o.solarIrradiance).multiply(o.sunRadianceToRelativeLuminance);return r.setFromVector3(T)}const Ln=`// Based on: https://github.com/pmndrs/postprocessing/blob/v6.37.4/src/materials/glsl/depth-mask.frag

#include <common>
#include <packing>

#include "core/depth"

#ifdef GL_FRAGMENT_PRECISION_HIGH
uniform highp sampler2D depthBuffer0;
uniform highp sampler2D depthBuffer1;
#else // GL_FRAGMENT_PRECISION_HIGH
uniform mediump sampler2D depthBuffer0;
uniform mediump sampler2D depthBuffer1;
#endif // GL_FRAGMENT_PRECISION_HIGH

uniform sampler2D inputBuffer;
uniform vec2 cameraNearFar;
uniform bool inverted;

float getViewZ(const float depth) {
  #ifdef PERSPECTIVE_CAMERA
  return perspectiveDepthToViewZ(depth, cameraNearFar.x, cameraNearFar.y);
  #else // PERSPECTIVE_CAMERA
  return orthographicDepthToViewZ(depth, cameraNearFar.x, cameraNearFar.y);
  #endif // PERSPECTIVE_CAMERA
}

varying vec2 vUv;

void main() {
  vec2 depth;

  #if DEPTH_PACKING_0 == 3201
  depth.x = unpackRGBAToDepth(texture2D(depthBuffer0, vUv));
  #else // DEPTH_PACKING_0 == 3201
  depth.x = reverseLogDepth(texture2D(depthBuffer0, vUv).r, cameraNearFar.x, cameraNearFar.y);
  #endif // DEPTH_PACKING_0 == 3201

  #if DEPTH_PACKING_1 == 3201
  depth.y = unpackRGBAToDepth(texture2D(depthBuffer1, vUv));
  #else // DEPTH_PACKING_1 == 3201
  depth.y = reverseLogDepth(texture2D(depthBuffer1, vUv).r, cameraNearFar.x, cameraNearFar.y);
  #endif // DEPTH_PACKING_1 == 3201

  bool isMaxDepth = depth.x == 1.0;

  #ifdef PERSPECTIVE_CAMERA
  depth.x = viewZToOrthographicDepth(getViewZ(depth.x), cameraNearFar.x, cameraNearFar.y);
  depth.y = viewZToOrthographicDepth(getViewZ(depth.y), cameraNearFar.x, cameraNearFar.y);
  #endif // PERSPECTIVE_CAMERA

  #if DEPTH_TEST_STRATEGY == 0
  // Decide based on depth test.
  bool keep = depthTest(depth.x, depth.y);

  #elif DEPTH_TEST_STRATEGY == 1
  // Always keep max depth.
  bool keep = isMaxDepth || depthTest(depth.x, depth.y);

  #else // DEPTH_TEST_STRATEGY
  // Always discard max depth.
  bool keep = !isMaxDepth && depthTest(depth.x, depth.y);

  #endif // DEPTH_TEST_STRATEGY

  if (inverted) {
    keep = !keep;
  }
  if (keep) {
    gl_FragColor = texture2D(inputBuffer, vUv);
  } else {
    discard;
  }
}
`;class ct extends L.Pass{constructor(e,t){super("LightingMaskPass"),this.selection=new L.Selection,this.needsSwap=!1,this.needsDepthTexture=!0,this.renderPass=new L.RenderPass(e,t,new a.MeshBasicMaterial),this.renderPass.ignoreBackground=!0,this.renderPass.skipShadowMapUpdate=!0,this.renderPass.selection=this.selection,this.depthTexture=new a.DepthTexture(1,1,a.UnsignedIntType),this.renderTarget=new a.WebGLRenderTarget(1,1,{format:a.RedFormat,depthTexture:this.depthTexture}),this.depthCopyPass0=new L.DepthCopyPass({depthPacking:a.RGBADepthPacking}),this.depthCopyPass1=new L.DepthCopyPass({depthPacking:a.RGBADepthPacking}),this.clearPass=new L.ClearPass(!0,!1,!1),this.clearPass.overrideClearColor=new a.Color(16777215),this.clearPass.overrideClearAlpha=1;const r=new L.DepthMaskMaterial;r.fragmentShader=f.resolveIncludes(Ln,{core:{depth:k.depth}}),r.uniforms.inverted=new a.Uniform(!1),r.copyCameraSettings(t),r.depthBuffer0=this.depthCopyPass0.texture,r.depthPacking0=a.RGBADepthPacking,r.depthBuffer1=this.depthCopyPass1.texture,r.depthPacking1=a.RGBADepthPacking,r.depthMode=a.LessEqualDepth,r.maxDepthStrategy=L.DepthTestStrategy.DISCARD_MAX_DEPTH,this.depthMaskMaterial=r,this.depthMaskPass=new L.ShaderPass(r)}set mainScene(e){this.renderPass.mainScene=e}set mainCamera(e){this.renderPass.mainCamera=e,this.depthMaskMaterial.copyCameraSettings(e)}initialize(e,t,r){this.renderPass.initialize(e,t,r),this.clearPass.initialize(e,t,r),this.depthMaskPass.initialize(e,t,r)}setDepthTexture(e,t=a.BasicDepthPacking){this.depthCopyPass0.setDepthTexture(e,t),this.depthCopyPass1.setDepthTexture(this.depthTexture,t)}render(e,t,r,i,s){const o=e.autoClear;e.autoClear=!1,this.depthCopyPass0.render(e,null,null),this.renderPass.render(e,this.renderTarget,null),this.depthCopyPass1.render(e,null,null),this.clearPass.render(e,this.renderTarget,null),this.depthMaskPass.render(e,null,this.renderTarget),e.autoClear=o}setSize(e,t){this.renderTarget.setSize(e,t),this.depthCopyPass0.setSize(e,t),this.depthCopyPass1.setSize(e,t)}get texture(){return this.renderTarget.texture}get selectionLayer(){return this.selection.layer}set selectionLayer(e){this.selection.layer=e}get inverted(){return this.depthMaskMaterial.uniforms.inverted.value}set inverted(e){this.depthMaskMaterial.uniforms.inverted.value=e}}const Hn=ct;var Gn=process.env.NODE_ENV==="production",Ve="Invariant failed";function bn(n,e){if(!n){if(Gn)throw new Error(Ve);var t=Ve;throw new Error(t)}}const ze=window.requestIdleCallback??function(e,t={}){const i=t.timeout??1,s=performance.now();return setTimeout(function(){e({get didTimeout(){return t.timeout!=null?!1:performance.now()-s-1>i},timeRemaining:function(){return Math.max(0,1+(performance.now()-s))}})},1)},Fn=`precision highp float;
precision highp sampler3D;

#include "bruneton/definitions"
#include "bruneton/common"
#include "bruneton/precompute"

uniform AtmosphereParameters ATMOSPHERE;

uniform sampler2D transmittanceTexture;

layout(location = 0) out vec4 outputColor;

void main() {
  vec3 deltaIrradiance;
  vec3 irradiance;
  deltaIrradiance = ComputeDirectIrradianceTexture(
    ATMOSPHERE,
    transmittanceTexture,
    gl_FragCoord.xy
  );
  irradiance = vec3(0.0);
  outputColor = vec4(OUTPUT, 1.0);
}
`,kn=`precision highp float;
precision highp sampler3D;

#include "bruneton/definitions"
#include "bruneton/common"
#include "bruneton/precompute"

uniform AtmosphereParameters ATMOSPHERE;

uniform mat3 luminanceFromRadiance;
uniform sampler3D singleRayleighScatteringTexture;
uniform sampler3D singleMieScatteringTexture;
uniform sampler3D multipleScatteringTexture;
uniform int scatteringOrder;

layout(location = 0) out vec4 outputColor;

void main() {
  vec3 deltaIrradiance;
  vec3 irradiance;
  deltaIrradiance = ComputeIndirectIrradianceTexture(
    ATMOSPHERE,
    singleRayleighScatteringTexture,
    singleMieScatteringTexture,
    multipleScatteringTexture,
    gl_FragCoord.xy,
    scatteringOrder
  );
  irradiance = luminanceFromRadiance * deltaIrradiance;
  outputColor = vec4(OUTPUT, 1.0);
}
`,Vn=`precision highp float;
precision highp sampler3D;

#include "bruneton/definitions"
#include "bruneton/common"
#include "bruneton/precompute"

uniform AtmosphereParameters ATMOSPHERE;

uniform mat3 luminanceFromRadiance;
uniform sampler2D transmittanceTexture;
uniform sampler3D scatteringDensityTexture;
uniform int layer;

layout(location = 0) out vec4 outputColor;

void main() {
  vec4 deltaMultipleScattering;
  vec4 scattering;
  float nu;
  deltaMultipleScattering.rgb = ComputeMultipleScatteringTexture(
    ATMOSPHERE,
    transmittanceTexture,
    scatteringDensityTexture,
    vec3(gl_FragCoord.xy, float(layer) + 0.5),
    nu
  );
  deltaMultipleScattering.a = 1.0;
  scattering = vec4(
    luminanceFromRadiance * deltaMultipleScattering.rgb / RayleighPhaseFunction(nu),
    0.0
  );
  outputColor = OUTPUT;
}
`,zn=`precision highp float;
precision highp sampler3D;

#include "bruneton/definitions"
#include "bruneton/common"
#include "bruneton/precompute"

uniform AtmosphereParameters ATMOSPHERE;

uniform sampler2D transmittanceTexture;
uniform sampler3D singleRayleighScatteringTexture;
uniform sampler3D singleMieScatteringTexture;
uniform sampler3D multipleScatteringTexture;
uniform sampler2D irradianceTexture;
uniform int scatteringOrder;
uniform int layer;

layout(location = 0) out vec4 scatteringDensity;

void main() {
  scatteringDensity.rgb = ComputeScatteringDensityTexture(
    ATMOSPHERE,
    transmittanceTexture,
    singleRayleighScatteringTexture,
    singleMieScatteringTexture,
    multipleScatteringTexture,
    irradianceTexture,
    vec3(gl_FragCoord.xy, float(layer) + 0.5),
    scatteringOrder
  );
  scatteringDensity.a = 1.0;
}
`,Bn=`precision highp float;
precision highp sampler3D;

#include "bruneton/definitions"
#include "bruneton/common"
#include "bruneton/precompute"

uniform AtmosphereParameters ATMOSPHERE;

uniform mat3 luminanceFromRadiance;
uniform sampler2D transmittanceTexture;
uniform int layer;

layout(location = 0) out vec4 outputColor;

void main() {
  vec4 deltaRayleigh;
  vec4 deltaMie;
  vec4 scattering;
  vec4 singleMieScattering;
  ComputeSingleScatteringTexture(
    ATMOSPHERE,
    transmittanceTexture,
    vec3(gl_FragCoord.xy, float(layer) + 0.5),
    deltaRayleigh.rgb,
    deltaMie.rgb
  );
  deltaRayleigh.a = 1.0;
  deltaMie.a = 1.0;
  scattering = vec4(
    luminanceFromRadiance * deltaRayleigh.rgb,
    (luminanceFromRadiance * deltaMie.rgb).r
  );
  singleMieScattering.rgb = luminanceFromRadiance * deltaMie.rgb;
  singleMieScattering.a = 1.0;
  outputColor = OUTPUT;
}
`,Wn=`precision highp float;
precision highp sampler3D;

#include "bruneton/definitions"
#include "bruneton/common"
#include "bruneton/precompute"

uniform AtmosphereParameters ATMOSPHERE;

layout(location = 0) out vec4 transmittance;

void main() {
  transmittance.rgb = ComputeTransmittanceToTopAtmosphereBoundaryTexture(
    ATMOSPHERE,
    gl_FragCoord.xy
  );
  transmittance.a = 1.0;
}
`,Xn=`
  precision highp float;
  in vec2 position;
  void main() {
    gl_Position = vec4(position, 1.0, 1.0);
  }
`;function q0(n,e,t){const r=new a.WebGLRenderTarget(e,t,{depthBuffer:!1,type:n,format:a.RGBAFormat}),i=r.texture;return i.minFilter=a.LinearFilter,i.magFilter=a.LinearFilter,i.wrapS=a.ClampToEdgeWrapping,i.wrapT=a.ClampToEdgeWrapping,i.colorSpace=a.NoColorSpace,r}function S0(n,e,t,r){const i=new a.WebGL3DRenderTarget(e,t,r,{depthBuffer:!1,type:n,format:a.RGBAFormat}),s=i.texture;return s.minFilter=a.LinearFilter,s.magFilter=a.LinearFilter,s.wrapS=a.ClampToEdgeWrapping,s.wrapT=a.ClampToEdgeWrapping,s.wrapR=a.ClampToEdgeWrapping,s.colorSpace=a.NoColorSpace,i}function jn(n){const e=n[Symbol.iterator]();return new Promise((t,r)=>{const i=()=>{try{const{value:s,done:o}=e.next();o===!0?t(s):ze(i)}catch(s){r(s instanceof Error?s:new Error)}};ze(i)})}async function Be(n,e,t){const{width:r,height:i}=e,s=t.type===a.HalfFloatType?new Uint16Array(r*i*4):new Float32Array(r*i*4);await n.readRenderTargetPixelsAsync(e,0,0,e.width,e.height,s),t.userData.imageData=s}class Yn{constructor(e){this.lambdas=new a.Vector3,this.luminanceFromRadiance=new a.Matrix3,e===a.HalfFloatType&&(this.opticalDepth=q0(e,t0,n0)),this.deltaIrradiance=q0(e,Q,e0),this.deltaRayleighScattering=S0(e,$,q,Z),this.deltaMieScattering=S0(e,$,q,Z),this.deltaScatteringDensity=S0(e,$,q,Z),this.deltaMultipleScattering=this.deltaRayleighScattering}dispose(){var e;(e=this.opticalDepth)==null||e.dispose(),this.deltaIrradiance.dispose(),this.deltaRayleighScattering.dispose(),this.deltaMieScattering.dispose(),this.deltaScatteringDensity.dispose()}}class h0 extends a.RawShaderMaterial{constructor(e){super({glslVersion:a.GLSL3,vertexShader:Xn,...e,defines:{TRANSMITTANCE_TEXTURE_WIDTH:t0.toFixed(0),TRANSMITTANCE_TEXTURE_HEIGHT:n0.toFixed(0),SCATTERING_TEXTURE_R_SIZE:M0.toFixed(0),SCATTERING_TEXTURE_MU_SIZE:w0.toFixed(0),SCATTERING_TEXTURE_MU_S_SIZE:y0.toFixed(0),SCATTERING_TEXTURE_NU_SIZE:C0.toFixed(0),IRRADIANCE_TEXTURE_WIDTH:Q.toFixed(0),IRRADIANCE_TEXTURE_HEIGHT:e0.toFixed(0),...e.defines}})}set additive(e){this.transparent=e,this.blending=e?a.CustomBlending:a.NoBlending,this.blendEquation=a.AddEquation,this.blendEquationAlpha=a.AddEquation,this.blendSrc=a.OneFactor,this.blendDst=a.OneFactor,this.blendSrcAlpha=a.OneFactor,this.blendDstAlpha=a.OneFactor}setUniforms(e){const t=this.uniforms;t.luminanceFromRadiance!=null&&t.luminanceFromRadiance.value.copy(e.luminanceFromRadiance),t.singleRayleighScatteringTexture!=null&&(t.singleRayleighScatteringTexture.value=e.deltaRayleighScattering.texture),t.singleMieScatteringTexture!=null&&(t.singleMieScatteringTexture.value=e.deltaMieScattering.texture),t.multipleScatteringTexture!=null&&(t.multipleScatteringTexture.value=e.deltaMultipleScattering.texture),t.scatteringDensityTexture!=null&&(t.scatteringDensityTexture.value=e.deltaScatteringDensity.texture),t.irradianceTexture!=null&&(t.irradianceTexture.value=e.deltaIrradiance.texture)}}class Kn{constructor(e,{type:t=f.isFloatLinearSupported(e)?a.FloatType:a.HalfFloatType,combinedScattering:r=!0,higherOrderScattering:i=!0}={}){var s,o;this.transmittanceMaterial=new h0({fragmentShader:f.resolveIncludes(Wn,{bruneton:{common:_._common,definitions:_._definitions,precompute:_._precompute}})}),this.directIrradianceMaterial=new h0({fragmentShader:f.resolveIncludes(Fn,{bruneton:{common:_._common,definitions:_._definitions,precompute:_._precompute}}),uniforms:{transmittanceTexture:new a.Uniform(null)}}),this.singleScatteringMaterial=new h0({fragmentShader:f.resolveIncludes(Bn,{bruneton:{common:_._common,definitions:_._definitions,precompute:_._precompute}}),uniforms:{luminanceFromRadiance:new a.Uniform(new a.Matrix3),transmittanceTexture:new a.Uniform(null),layer:new a.Uniform(0)}}),this.scatteringDensityMaterial=new h0({fragmentShader:f.resolveIncludes(zn,{bruneton:{common:_._common,definitions:_._definitions,precompute:_._precompute}}),uniforms:{transmittanceTexture:new a.Uniform(null),singleRayleighScatteringTexture:new a.Uniform(null),singleMieScatteringTexture:new a.Uniform(null),multipleScatteringTexture:new a.Uniform(null),irradianceTexture:new a.Uniform(null),scatteringOrder:new a.Uniform(0),layer:new a.Uniform(0)}}),this.indirectIrradianceMaterial=new h0({fragmentShader:f.resolveIncludes(kn,{bruneton:{common:_._common,definitions:_._definitions,precompute:_._precompute}}),uniforms:{luminanceFromRadiance:new a.Uniform(new a.Matrix3),singleRayleighScatteringTexture:new a.Uniform(null),singleMieScatteringTexture:new a.Uniform(null),multipleScatteringTexture:new a.Uniform(null),scatteringOrder:new a.Uniform(0)}}),this.multipleScatteringMaterial=new h0({fragmentShader:f.resolveIncludes(Vn,{bruneton:{common:_._common,definitions:_._definitions,precompute:_._precompute}}),uniforms:{luminanceFromRadiance:new a.Uniform(new a.Matrix3),transmittanceTexture:new a.Uniform(null),scatteringDensityTexture:new a.Uniform(null),layer:new a.Uniform(0)}}),this.mesh=new a.Mesh(new a.PlaneGeometry(2,2)),this.scene=new a.Scene().add(this.mesh),this.camera=new a.Camera,this.updating=!1,this.renderer=e,this.type=t,this.transmittanceRenderTarget=q0(t,t0,n0),this.scatteringRenderTarget=S0(t,$,q,Z),this.irradianceRenderTarget=q0(t,Q,e0),r||(this.singleMieScatteringRenderTarget=S0(t,$,q,Z)),i&&(this.higherOrderScatteringRenderTarget=S0(t,$,q,Z)),this.textures={transmittanceTexture:this.transmittanceRenderTarget.texture,scatteringTexture:this.scatteringRenderTarget.texture,irradianceTexture:this.irradianceRenderTarget.texture,singleMieScatteringTexture:(s=this.singleMieScatteringRenderTarget)==null?void 0:s.texture,higherOrderScatteringTexture:(o=this.higherOrderScatteringRenderTarget)==null?void 0:o.texture}}render3DRenderTarget(e,t){for(let r=0;r<e.depth;++r)t.uniforms.layer.value=r,this.renderer.setRenderTarget(e,r),this.renderer.render(this.scene,this.camera)}computeTransmittance(e){const t=this.transmittanceMaterial;delete t.defines.TRANSMITTANCE_PRECISION_LOG,t.needsUpdate=!0,this.mesh.material=t,this.renderer.setRenderTarget(e.renderTarget),this.renderer.render(this.scene,this.camera)}computeOpticalDepth(e){const t=this.transmittanceMaterial;t.defines.TRANSMITTANCE_PRECISION_LOG="1",t.needsUpdate=!0,this.mesh.material=t,this.renderer.setRenderTarget(e.renderTarget),this.renderer.render(this.scene,this.camera)}computeDirectIrradiance(e){var i;const t=this.directIrradianceMaterial;t.defines.OUTPUT=e.output,t.additive=e.additive,this.type===a.HalfFloatType?t.defines.TRANSMITTANCE_PRECISION_LOG="1":delete t.defines.TRANSMITTANCE_PRECISION_LOG,t.needsUpdate=!0;const r=t.uniforms;r.transmittanceTexture.value=((i=e.context.opticalDepth)==null?void 0:i.texture)??this.transmittanceRenderTarget.texture,this.mesh.material=t,this.renderer.setRenderTarget(e.renderTarget),this.renderer.render(this.scene,this.camera)}computeSingleScattering(e){var i;const t=this.singleScatteringMaterial;t.defines.OUTPUT=e.output,t.additive=e.additive,this.type===a.HalfFloatType?t.defines.TRANSMITTANCE_PRECISION_LOG="1":delete t.defines.TRANSMITTANCE_PRECISION_LOG,t.needsUpdate=!0;const r=t.uniforms;r.transmittanceTexture.value=((i=e.context.opticalDepth)==null?void 0:i.texture)??this.transmittanceRenderTarget.texture,t.setUniforms(e.context),this.mesh.material=t,this.render3DRenderTarget(e.renderTarget,t)}computeScatteringDensity(e){var i;const t=this.scatteringDensityMaterial;this.type===a.HalfFloatType?t.defines.TRANSMITTANCE_PRECISION_LOG="1":delete t.defines.TRANSMITTANCE_PRECISION_LOG,t.needsUpdate=!0;const r=t.uniforms;r.transmittanceTexture.value=((i=e.context.opticalDepth)==null?void 0:i.texture)??this.transmittanceRenderTarget.texture,r.scatteringOrder.value=e.scatteringOrder,t.setUniforms(e.context),this.mesh.material=t,this.render3DRenderTarget(e.renderTarget,t)}computeIndirectIrradiance(e){const t=this.indirectIrradianceMaterial;t.defines.OUTPUT=e.output,t.additive=e.additive,t.needsUpdate=!0;const r=t.uniforms;r.scatteringOrder.value=e.scatteringOrder-1,t.setUniforms(e.context),this.mesh.material=t,this.renderer.setRenderTarget(e.renderTarget),this.renderer.render(this.scene,this.camera)}computeMultipleScattering(e){var i;const t=this.multipleScatteringMaterial;t.defines.OUTPUT=e.output,t.additive=e.additive,this.type===a.HalfFloatType?t.defines.TRANSMITTANCE_PRECISION_LOG="1":delete t.defines.TRANSMITTANCE_PRECISION_LOG,t.needsUpdate=!0;const r=t.uniforms;r.transmittanceTexture.value=((i=e.context.opticalDepth)==null?void 0:i.texture)??this.transmittanceRenderTarget.texture,t.setUniforms(e.context),this.mesh.material=t,this.render3DRenderTarget(e.renderTarget,t)}*precompute(e,t){this.computeTransmittance({renderTarget:this.transmittanceRenderTarget}),this.type===a.HalfFloatType&&(bn(e.opticalDepth!=null),this.computeOpticalDepth({renderTarget:e.opticalDepth})),this.computeDirectIrradiance({renderTarget:e.deltaIrradiance,context:e,output:"deltaIrradiance",additive:!1}),this.computeDirectIrradiance({renderTarget:this.irradianceRenderTarget,context:e,output:"irradiance",additive:t}),this.renderer.setRenderTarget(null),yield,this.computeSingleScattering({renderTarget:e.deltaRayleighScattering,context:e,output:"deltaRayleigh",additive:!1}),this.computeSingleScattering({renderTarget:e.deltaMieScattering,context:e,output:"deltaMie",additive:!1}),this.computeSingleScattering({renderTarget:this.scatteringRenderTarget,context:e,output:"scattering",additive:t}),this.singleMieScatteringRenderTarget!=null&&this.computeSingleScattering({renderTarget:this.singleMieScatteringRenderTarget,context:e,output:"singleMieScattering",additive:t}),this.renderer.setRenderTarget(null),yield;for(let r=2;r<=4;++r)this.computeScatteringDensity({renderTarget:e.deltaScatteringDensity,context:e,scatteringOrder:r}),this.computeIndirectIrradiance({renderTarget:e.deltaIrradiance,context:e,scatteringOrder:r,output:"deltaIrradiance",additive:!1}),this.computeIndirectIrradiance({renderTarget:this.irradianceRenderTarget,context:e,scatteringOrder:r,output:"irradiance",additive:!0}),this.computeMultipleScattering({renderTarget:e.deltaMultipleScattering,context:e,output:"deltaMultipleScattering",additive:!1}),this.computeMultipleScattering({renderTarget:this.scatteringRenderTarget,context:e,output:"scattering",additive:!0}),this.higherOrderScatteringRenderTarget!=null&&this.computeMultipleScattering({renderTarget:this.higherOrderScatteringRenderTarget,context:e,output:"scattering",additive:!0}),this.renderer.setRenderTarget(null),yield}async update(e=X.DEFAULT){var o;this.updating=!0;const t=e.toUniform();this.transmittanceMaterial.uniforms.ATMOSPHERE=t,this.directIrradianceMaterial.uniforms.ATMOSPHERE=t,this.singleScatteringMaterial.uniforms.ATMOSPHERE=t,this.scatteringDensityMaterial.uniforms.ATMOSPHERE=t,this.indirectIrradianceMaterial.uniforms.ATMOSPHERE=t,this.multipleScatteringMaterial.uniforms.ATMOSPHERE=t;const r=this.renderer,i=new Yn(this.type);i.lambdas.set(680,550,440),i.luminanceFromRadiance.identity();const s=r.autoClear;return r.autoClear=!1,await jn(this.precompute(i,!1)),r.autoClear=s,i.dispose(),await Be(this.renderer,this.transmittanceRenderTarget,this.transmittanceRenderTarget.texture),await Be(this.renderer,this.irradianceRenderTarget,this.irradianceRenderTarget.texture),this.updating=!1,(o=this.disposeQueue)==null||o.call(this),this.textures}dispose(e={}){var r,i,s,o;if(this.updating){this.disposeQueue=()=>{this.dispose(e),this.disposeQueue=void 0};return}const{textures:t=!0}=e;t||(this.transmittanceRenderTarget.textures.splice(0,1),this.scatteringRenderTarget.textures.splice(0,1),this.irradianceRenderTarget.textures.splice(0,1),(r=this.singleMieScatteringRenderTarget)==null||r.textures.splice(0,1),(i=this.higherOrderScatteringRenderTarget)==null||i.textures.splice(0,1)),this.transmittanceRenderTarget.dispose(),this.scatteringRenderTarget.dispose(),this.irradianceRenderTarget.dispose(),(s=this.singleMieScatteringRenderTarget)==null||s.dispose(),(o=this.higherOrderScatteringRenderTarget)==null||o.dispose(),this.transmittanceMaterial.dispose(),this.directIrradianceMaterial.dispose(),this.singleScatteringMaterial.dispose(),this.scatteringDensityMaterial.dispose(),this.indirectIrradianceMaterial.dispose(),this.multipleScatteringMaterial.dispose(),this.mesh.geometry.dispose()}}function $n(n){var e=[];if(n.length===0)return"";if(typeof n[0]!="string")throw new TypeError("Url must be a string. Received "+n[0]);if(n[0].match(/^[^/:]+:\/*$/)&&n.length>1){var t=n.shift();n[0]=t+n[0]}n[0].match(/^file:\/\/\//)?n[0]=n[0].replace(/^([^/:]+):\/*/,"$1:///"):n[0]=n[0].replace(/^([^/:]+):\/*/,"$1://");for(var r=0;r<n.length;r++){var i=n[r];if(typeof i!="string")throw new TypeError("Url must be a string. Received "+i);i!==""&&(r>0&&(i=i.replace(/^[\/]+/,"")),r<n.length-1?i=i.replace(/[\/]+$/,""):i=i.replace(/[\/]+$/,"/"),e.push(i))}var s=e.join("/");s=s.replace(/\/(\?|&|#[^!])/g,"$1");var o=s.split("?");return s=o.shift()+(o.length>0?"?":"")+o.join("&"),s}function qn(){var n;return typeof arguments[0]=="object"?n=arguments[0]:n=[].slice.call(arguments),$n(n)}const We={width:t0,height:n0},m0={width:$,height:q,depth:Z},Xe={width:Q,height:e0};class Zn extends a.Loader{constructor({format:e="exr",type:t=a.HalfFloatType,combinedScattering:r=!0,higherOrderScattering:i=!0}={},s){super(s),this.format=e,this.type=t,this.combinedScattering=r,this.higherOrderScattering=i}setType(e){return this.type=f.isFloatLinearSupported(e)?a.FloatType:a.HalfFloatType,this}setTypeFromRenderer(e){return this.setType(e)}load(e,t,r,i){const s={},o=({key:u,loader:c,path:d})=>(c.setRequestHeader(this.requestHeader),c.setPath(this.path),c.setWithCredentials(this.withCredentials),c.load(qn(e,d),h=>{h.type=this.type,this.type===a.FloatType&&(h.image.data=new Float32Array(new f.Float16Array(h.image.data.buffer))),h.minFilter=a.LinearFilter,h.magFilter=a.LinearFilter,s[`${u}Texture`]=h,s.irradianceTexture!=null&&s.scatteringTexture!=null&&s.transmittanceTexture!=null&&(this.combinedScattering||s.singleMieScatteringTexture!=null)&&(!this.higherOrderScattering||s.higherOrderScatteringTexture!=null)&&(t==null||t(s))},r,i));return this.format==="exr"?{transmittanceTexture:o({key:"transmittance",loader:new f.EXRTextureLoader(We,this.manager),path:"transmittance.exr"}),scatteringTexture:o({key:"scattering",loader:new f.EXR3DTextureLoader(m0,this.manager),path:"scattering.exr"}),irradianceTexture:o({key:"irradiance",loader:new f.EXRTextureLoader(Xe,this.manager),path:"irradiance.exr"}),singleMieScatteringTexture:this.combinedScattering?void 0:o({key:"singleMieScattering",loader:new f.EXR3DTextureLoader(m0,this.manager),path:"single_mie_scattering.exr"}),higherOrderScatteringTexture:this.higherOrderScattering?o({key:"higherOrderScattering",loader:new f.EXR3DTextureLoader(m0,this.manager),path:"higher_order_scattering.exr"}):void 0}:{transmittanceTexture:o({key:"transmittance",loader:new f.DataTextureLoader(a.DataTexture,f.parseFloat16Array,We,this.manager),path:"transmittance.bin"}),scatteringTexture:o({key:"scattering",loader:new f.DataTextureLoader(a.Data3DTexture,f.parseFloat16Array,m0,this.manager),path:"scattering.bin"}),irradianceTexture:o({key:"irradiance",loader:new f.DataTextureLoader(a.DataTexture,f.parseFloat16Array,Xe,this.manager),path:"irradiance.bin"}),singleMieScatteringTexture:this.combinedScattering?void 0:o({key:"singleMieScattering",loader:new f.DataTextureLoader(a.Data3DTexture,f.parseFloat16Array,m0,this.manager),path:"single_mie_scattering.bin"}),higherOrderScatteringTexture:this.higherOrderScattering?o({key:"higherOrderScattering",loader:new f.DataTextureLoader(a.Data3DTexture,f.parseFloat16Array,m0,this.manager),path:"higher_order_scattering.bin"}):void 0}}}function Jn({topRadius:n,bottomRadius:e},t,r,i){const s=(t-e)/(n-e),o=r*.5+.5;return i.set($0(o,Q),$0(s,e0))}const Qn=1/Math.sqrt(Math.PI),ue=Math.sqrt(3)/(2*Math.sqrt(Math.PI)),er=new a.Vector3,le=new a.Vector3,tr=new a.Vector2,nr=new a.Matrix3,ut={ellipsoid:f.Ellipsoid.WGS84,correctAltitude:!0};class rr extends a.LightProbe{constructor(e,t=X.DEFAULT){super(),this.atmosphere=t,this.worldToECEFMatrix=new a.Matrix4;const{irradianceTexture:r=null,ellipsoid:i,correctAltitude:s,sunDirection:o}={...ut,...e};this.irradianceTexture=r,this.ellipsoid=i,this.correctAltitude=s,this.sunDirection=(o==null?void 0:o.clone())??new a.Vector3}update(){if(this.irradianceTexture==null)return;const e=this.worldToECEFMatrix,t=nr.setFromMatrix4(e).transpose(),i=this.getWorldPosition(er).applyMatrix4(e);if(this.correctAltitude){const m=this.ellipsoid.projectOnSurface(i,le);m!=null&&i.add(J0(m,this.atmosphere.bottomRadius,this.ellipsoid,le))}const s=i.length(),o=i.dot(this.sunDirection)/s,u=Jn(this.atmosphere,s,o,tr),c=ot(this.irradianceTexture,u,le);c.multiply(this.atmosphere.skyRadianceToRelativeLuminance);const d=this.ellipsoid.getSurfaceNormal(i).applyMatrix3(t),h=this.sh.coefficients;h[0].copy(c).multiplyScalar(Qn),h[1].copy(c).multiplyScalar(ue*d.y),h[2].copy(c).multiplyScalar(ue*d.z),h[3].copy(c).multiplyScalar(ue*d.x)}}const ir=`precision highp float;
precision highp sampler3D;

#define RECIPROCAL_PI 0.3183098861837907

#include "core/raySphereIntersection"

#include "bruneton/definitions"

uniform AtmosphereParameters ATMOSPHERE;
uniform vec3 SUN_SPECTRAL_RADIANCE_TO_LUMINANCE;
uniform vec3 SKY_SPECTRAL_RADIANCE_TO_LUMINANCE;

uniform sampler2D transmittance_texture;
uniform sampler3D scattering_texture;
uniform sampler2D irradiance_texture;
uniform sampler3D single_mie_scattering_texture;
uniform sampler3D higher_order_scattering_texture;

#include "bruneton/common"
#include "bruneton/runtime"

#include "sky"

uniform vec3 sunDirection;
uniform vec3 moonDirection;
uniform float moonAngularRadius;
uniform float lunarRadianceScale;
uniform vec3 groundAlbedo;

#ifdef HAS_SHADOW_LENGTH
uniform sampler2D shadowLengthBuffer;
#endif // HAS_SHADOW_LENGTH

in vec2 vUv;
in vec3 vCameraPosition;
in vec3 vRayDirection;

layout(location = 0) out vec4 outputColor;

#include <mrt_layout>

void main() {
  float shadowLength = 0.0;
  #ifdef HAS_SHADOW_LENGTH
  shadowLength = texture(shadowLengthBuffer, vUv).r;
  #endif // HAS_SHADOW_LENGTH

  vec3 cameraPosition = vCameraPosition;
  vec3 rayDirection = normalize(vRayDirection);

  #ifdef GROUND_ALBEDO

  float r = length(cameraPosition);
  float mu = dot(cameraPosition, rayDirection) / r;
  bool intersectsGround = RayIntersectsGround(ATMOSPHERE, r, mu);
  if (intersectsGround) {
    float distanceToGround = raySphereFirstIntersection(
      cameraPosition,
      rayDirection,
      ATMOSPHERE.bottom_radius
    );
    vec3 groundPosition = rayDirection * distanceToGround + cameraPosition;
    vec3 surfaceNormal = normalize(groundPosition);
    vec3 skyIrradiance;
    vec3 sunIrradiance = GetSunAndSkyIrradiance(
      cameraPosition,
      surfaceNormal,
      sunDirection,
      skyIrradiance
    );
    vec3 transmittance;
    vec3 inscatter = GetSkyRadianceToPoint(
      cameraPosition,
      ATMOSPHERE.bottom_radius * surfaceNormal,
      shadowLength,
      sunDirection,
      transmittance
    );
    vec3 radiance = groundAlbedo * RECIPROCAL_PI * (sunIrradiance + skyIrradiance);
    outputColor.rgb = radiance * transmittance + inscatter;
  } else {
    outputColor.rgb = getSkyRadiance(
      cameraPosition,
      rayDirection,
      shadowLength,
      sunDirection,
      moonDirection,
      moonAngularRadius,
      lunarRadianceScale
    );
  }

  #else // GROUND_ALBEDO

  outputColor.rgb = getSkyRadiance(
    cameraPosition,
    rayDirection,
    shadowLength,
    sunDirection,
    moonDirection,
    moonAngularRadius,
    lunarRadianceScale
  );

  #endif // GROUND_ALBEDO

  outputColor.a = 1.0;

  #include <mrt_output>
}
`,ar=`precision highp float;
precision highp sampler3D;

uniform mat4 inverseProjectionMatrix;
uniform mat4 inverseViewMatrix;
uniform vec3 cameraPosition;
uniform mat4 worldToECEFMatrix;
uniform vec3 altitudeCorrection;

layout(location = 0) in vec3 position;

out vec2 vUv;
out vec3 vCameraPosition;
out vec3 vRayDirection;

void getCameraRay(out vec3 origin, out vec3 direction) {
  bool isPerspective = inverseProjectionMatrix[2][3] != 0.0; // 4th entry in the 3rd column

  if (isPerspective) {
    // Calculate the camera ray for a perspective camera.
    vec4 viewPosition = inverseProjectionMatrix * vec4(position, 1.0);
    vec4 worldDirection = inverseViewMatrix * vec4(viewPosition.xyz, 0.0);
    origin = cameraPosition;
    direction = worldDirection.xyz;
  } else {
    // Unprojected points to calculate direction.
    vec4 nearPoint = inverseProjectionMatrix * vec4(position.xy, -1.0, 1.0);
    vec4 farPoint = inverseProjectionMatrix * vec4(position.xy, -0.9, 1.0);
    nearPoint /= nearPoint.w;
    farPoint /= farPoint.w;

    // Calculate world values
    vec4 worldDirection = inverseViewMatrix * vec4(farPoint.xyz - nearPoint.xyz, 0.0);
    vec4 worldOrigin = inverseViewMatrix * nearPoint;

    // Outputs
    direction = worldDirection.xyz;
    origin = worldOrigin.xyz;
  }
}

void main() {
  vUv = position.xy * 0.5 + 0.5;

  vec3 direction, origin;
  getCameraRay(origin, direction);

  vec3 cameraPositionECEF = (worldToECEFMatrix * vec4(origin, 1.0)).xyz;
  vCameraPosition = (cameraPositionECEF + altitudeCorrection) * METER_TO_LENGTH_UNIT;
  vRayDirection = (worldToECEFMatrix * vec4(direction, 0.0)).xyz;

  gl_Position = vec4(position.xy, 1.0, 1.0);
}
`;var or=Object.defineProperty,ye=(n,e,t,r)=>{for(var i=void 0,s=n.length-1,o;s>=0;s--)(o=n[s])&&(i=o(e,t,i)||i);return i&&or(e,t,i),i};const lt={...Q0,sun:!0,moon:!0,moonAngularRadius:.0045,lunarRadianceScale:1,ground:!0,groundAlbedo:new a.Color(0)};class te extends D0{constructor(e){const{sun:t,moon:r,moonDirection:i,moonAngularRadius:s,lunarRadianceScale:o,ground:u,groundAlbedo:c,...d}={...lt,...e};super({name:"SkyMaterial",glslVersion:a.GLSL3,vertexShader:ar,fragmentShader:f.resolveIncludes(ir,{core:{raySphereIntersection:k.raySphereIntersection},bruneton:{common:_._common,definitions:_._definitions,runtime:_._runtime},sky:Ye}),...d,uniforms:{inverseProjectionMatrix:new a.Uniform(new a.Matrix4),inverseViewMatrix:new a.Uniform(new a.Matrix4),moonDirection:new a.Uniform((i==null?void 0:i.clone())??new a.Vector3),moonAngularRadius:new a.Uniform(s),lunarRadianceScale:new a.Uniform(o),groundAlbedo:new a.Uniform(c.clone()),shadowLengthBuffer:new a.Uniform(null),...d.uniforms},defines:{PERSPECTIVE_CAMERA:"1"},depthTest:!0}),this.shadowLength=null,this.sun=t,this.moon=r,this.ground=u}onBeforeRender(e,t,r,i,s,o){super.onBeforeRender(e,t,r,i,s,o);const{uniforms:u,defines:c}=this;u.inverseProjectionMatrix.value.copy(r.projectionMatrixInverse),u.inverseViewMatrix.value.copy(r.matrixWorld);const d=c.PERSPECTIVE_CAMERA!=null,h=r.isPerspectiveCamera===!0;h!==d&&(h?c.PERSPECTIVE_CAMERA="1":delete c.PERSPECTIVE_CAMERA,this.needsUpdate=!0);const m=this.groundAlbedo,g=c.GROUND_ALBEDO!=null,T=m.r!==0||m.g!==0||m.b!==0;T!==g&&(T?this.defines.GROUND_ALBEDO="1":delete this.defines.GROUND_ALBEDO,this.needsUpdate=!0);const p=this.shadowLength,v=c.HAS_SHADOW_LENGTH!=null,x=p!=null;x!==v&&(x?c.HAS_SHADOW_LENGTH="1":(delete c.HAS_SHADOW_LENGTH,u.shadowLengthBuffer.value=null),this.needsUpdate=!0),x&&(u.shadowLengthBuffer.value=p.map)}get moonDirection(){return this.uniforms.moonDirection.value}get moonAngularRadius(){return this.uniforms.moonAngularRadius.value}set moonAngularRadius(e){this.uniforms.moonAngularRadius.value=e}get lunarRadianceScale(){return this.uniforms.lunarRadianceScale.value}set lunarRadianceScale(e){this.uniforms.lunarRadianceScale.value=e}get groundAlbedo(){return this.uniforms.groundAlbedo.value}}ye([f.define("SUN")],te.prototype,"sun");ye([f.define("MOON")],te.prototype,"moon");ye([f.define("GROUND")],te.prototype,"ground");class sr extends a.BufferGeometry{constructor(e){super();const t=new Int16Array(e),r=new Uint8Array(e),i=new a.InterleavedBuffer(t,5),s=new a.InterleavedBuffer(r,10);this.setAttribute("position",new a.InterleavedBufferAttribute(i,3,0,!0)),this.setAttribute("magnitude",new a.InterleavedBufferAttribute(s,1,6,!0)),this.setAttribute("color",new a.InterleavedBufferAttribute(s,3,7,!0)),this.boundingSphere=new a.Sphere(new a.Vector3,1)}}const cr=`precision highp float;
precision highp sampler3D;

#include "bruneton/definitions"

uniform AtmosphereParameters ATMOSPHERE;
uniform vec3 SUN_SPECTRAL_RADIANCE_TO_LUMINANCE;
uniform vec3 SKY_SPECTRAL_RADIANCE_TO_LUMINANCE;

uniform sampler2D transmittance_texture;
uniform sampler3D scattering_texture;
uniform sampler2D irradiance_texture;
uniform sampler3D single_mie_scattering_texture;
uniform sampler3D higher_order_scattering_texture;

#include "bruneton/common"
#include "bruneton/runtime"

uniform vec3 sunDirection;

in vec3 vCameraPosition;
in vec3 vRayDirection;

layout(location = 0) out vec4 outputColor;

#include <mrt_layout>

in vec3 vColor;

void main() {
  #if !defined(PERSPECTIVE_CAMERA)
  outputColor = vec4(0.0);
  discard; // Rendering celestial objects without perspective doesn't make sense.
  #endif // !defined(PERSPECTIVE_CAMERA)

  #ifdef BACKGROUND
  vec3 rayDirection = normalize(vRayDirection);
  float r = length(vCameraPosition);
  float mu = dot(vCameraPosition, rayDirection) / r;

  if (RayIntersectsGround(ATMOSPHERE, r, mu)) {
    discard;
  }

  vec3 transmittance;
  vec3 radiance = GetSkyRadiance(
    vCameraPosition,
    normalize(vRayDirection),
    0.0, // Shadow length
    sunDirection,
    transmittance
  );
  radiance += transmittance * vColor;
  outputColor = vec4(radiance, 1.0);
  #else // BACKGROUND
  outputColor = vec4(vColor, 1.0);
  #endif // BACKGROUND

  #include <mrt_output>
}
`,ur=`precision highp float;
precision highp sampler3D;

#define saturate(x) clamp(x, 0.0, 1.0)

uniform mat4 projectionMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 viewMatrix;
uniform mat4 matrixWorld;
uniform vec3 cameraPosition;
uniform float cameraFar;
uniform mat4 worldToECEFMatrix;
uniform vec3 altitudeCorrection;
uniform float pointSize;
uniform vec2 magnitudeRange;
uniform float intensity;

layout(location = 0) in vec3 position;
layout(location = 1) in float magnitude;
layout(location = 2) in vec3 color;

out vec3 vCameraPosition;
out vec3 vRayDirection;
out vec3 vEllipsoidCenter;
out vec3 vColor;

void main() {
  // Magnitude is stored between 0 to 1 within the given range.
  float m = mix(magnitudeRange.x, magnitudeRange.y, magnitude);
  vec3 v = pow(vec3(10.0), -vec3(magnitudeRange, m) / 2.5);
  vColor = vec3(intensity * color);
  vColor *= saturate((v.z - v.y) / (v.x - v.y));

  #ifdef BACKGROUND
  vec3 worldDirection = normalize(matrixWorld * vec4(position, 1.0)).xyz;
  vec3 cameraPositionECEF = (worldToECEFMatrix * vec4(cameraPosition, 1.0)).xyz;
  vCameraPosition = (cameraPositionECEF + altitudeCorrection) * METER_TO_LENGTH_UNIT;
  vRayDirection = (worldToECEFMatrix * vec4(worldDirection, 0.0)).xyz;
  gl_Position =
    projectionMatrix * viewMatrix * vec4(cameraPosition + worldDirection * cameraFar, 1.0);
  #else // BACKGROUND
  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
  #endif // BACKGROUND

  gl_PointSize = pointSize;
}
`;var lr=Object.defineProperty,dt=(n,e,t,r)=>{for(var i=void 0,s=n.length-1,o;s>=0;s--)(o=n[s])&&(i=o(e,t,i)||i);return i&&lr(e,t,i),i};const ht={...Q0,pointSize:1,intensity:1,background:!0,ground:!0};class Ce extends D0{constructor(e){const{pointSize:t,radianceScale:r,intensity:i,background:s,ground:o,...u}={...ht,...e};super({name:"StarsMaterial",glslVersion:a.GLSL3,vertexShader:ur,fragmentShader:f.resolveIncludes(cr,{bruneton:{common:_._common,definitions:_._definitions,runtime:_._runtime}}),...u,uniforms:{projectionMatrix:new a.Uniform(new a.Matrix4),modelViewMatrix:new a.Uniform(new a.Matrix4),viewMatrix:new a.Uniform(new a.Matrix4),matrixWorld:new a.Uniform(new a.Matrix4),cameraFar:new a.Uniform(0),pointSize:new a.Uniform(0),magnitudeRange:new a.Uniform(new a.Vector2(-2,8)),intensity:new a.Uniform(r??i),...u.uniforms},defines:{PERSPECTIVE_CAMERA:"1"}}),this.pointSize=t,this.background=s,this.ground=o}onBeforeRender(e,t,r,i,s,o){super.onBeforeRender(e,t,r,i,s,o);const u=this.uniforms;u.projectionMatrix.value.copy(r.projectionMatrix),u.modelViewMatrix.value.copy(r.modelViewMatrix),u.viewMatrix.value.copy(r.matrixWorldInverse),u.matrixWorld.value.copy(s.matrixWorld),u.cameraFar.value=r.far,u.pointSize.value=this.pointSize*e.getPixelRatio();const c=r.isPerspectiveCamera===!0;this.defines.PERSPECTIVE_CAMERA!=null!==c&&(c?this.defines.PERSPECTIVE_CAMERA="1":delete this.defines.PERSPECTIVE_CAMERA,this.needsUpdate=!0)}get magnitudeRange(){return this.uniforms.magnitudeRange.value}get radianceScale(){return this.intensity}set radianceScale(e){this.intensity=e}get intensity(){return this.uniforms.intensity.value}set intensity(e){this.uniforms.intensity.value=e}}dt([f.define("BACKGROUND")],Ce.prototype,"background");dt([f.define("GROUND")],Ce.prototype,"ground");const dr=new a.Vector3,hr=new a.Matrix3,mt={ellipsoid:f.Ellipsoid.WGS84,correctAltitude:!0,distance:1};class mr extends a.DirectionalLight{constructor(e,t=X.DEFAULT){super(),this.atmosphere=t,this.worldToECEFMatrix=new a.Matrix4;const{irradianceTexture:r=null,ellipsoid:i,correctAltitude:s,sunDirection:o,distance:u}={...mt,...e};this.transmittanceTexture=r,this.ellipsoid=i,this.correctAltitude=s,this.sunDirection=(o==null?void 0:o.clone())??new a.Vector3,this.distance=u}update(){const e=this.worldToECEFMatrix,t=hr.setFromMatrix4(e).transpose();if(this.position.copy(this.sunDirection).applyMatrix3(t).normalize().multiplyScalar(this.distance).add(this.target.position),this.transmittanceTexture==null)return;const r=this.target.getWorldPosition(dr).applyMatrix4(e);st(this.transmittanceTexture,r,this.sunDirection,this.color,{ellipsoid:this.ellipsoid,correctAltitude:this.correctAltitude},this.atmosphere)}}exports.AerialPerspectiveEffect=I;exports.AtmosphereMaterialBase=D0;exports.AtmosphereParameters=X;exports.DEFAULT_PRECOMPUTED_TEXTURES_URL=pt;exports.DEFAULT_STARS_DATA_URL=Tt;exports.DensityProfileLayer=i0;exports.IRRADIANCE_TEXTURE_HEIGHT=e0;exports.IRRADIANCE_TEXTURE_WIDTH=Q;exports.IrradianceMaskPass=Hn;exports.LightingMaskPass=ct;exports.METER_TO_LENGTH_UNIT=A0;exports.PrecomputedTexturesGenerator=Kn;exports.PrecomputedTexturesLoader=Zn;exports.SCATTERING_TEXTURE_DEPTH=Z;exports.SCATTERING_TEXTURE_HEIGHT=q;exports.SCATTERING_TEXTURE_MU_SIZE=w0;exports.SCATTERING_TEXTURE_MU_S_SIZE=y0;exports.SCATTERING_TEXTURE_NU_SIZE=C0;exports.SCATTERING_TEXTURE_R_SIZE=M0;exports.SCATTERING_TEXTURE_WIDTH=$;exports.SKY_RENDER_ORDER=St;exports.SkyLightProbe=rr;exports.SkyMaterial=te;exports.StarsGeometry=sr;exports.StarsMaterial=Ce;exports.SunDirectionalLight=mr;exports.TRANSMITTANCE_TEXTURE_HEIGHT=n0;exports.TRANSMITTANCE_TEXTURE_WIDTH=t0;exports.XYZ_TO_SRGB=Et;exports.aerialPerspectiveEffectOptionsDefaults=Ke;exports.atmosphereMaterialParametersBaseDefaults=Q0;exports.getAltitudeCorrectionOffset=J0;exports.getECIToECEFRotationMatrix=Me;exports.getMoonDirectionECEF=Mn;exports.getMoonDirectionECI=xn;exports.getSunDirectionECEF=An;exports.getSunDirectionECI=Rn;exports.getSunLightColor=st;exports.skyLightProbeParametersDefaults=ut;exports.skyMaterialParametersDefaults=lt;exports.starsMaterialParametersDefaults=ht;exports.sunDirectionalLightParametersDefaults=mt;
//# sourceMappingURL=shared.cjs.map
